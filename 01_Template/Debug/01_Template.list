
01_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a24  08005a24  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a2c  08005a2c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004b20  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b98  20004b98  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000137c4  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003211  00000000  00000000  000338af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012b0  00000000  00000000  00036ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e49  00000000  00000000  00037d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023c7a  00000000  00000000  00038bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013d6b  00000000  00000000  0005c833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d47b2  00000000  00000000  0007059e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000054c8  00000000  00000000  00144d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0014a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005870 	.word	0x08005870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005870 	.word	0x08005870

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  /* creation of Task_4 */
  //Task_4Handle = osThreadNew(Task_Four, NULL, &Task_4_attributes);

  /* USER CODE BEGIN RTOS_THREADS */

  xReturned_vTaskCodeOne = xTaskCreate(vTaskCodeOne,
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_FREERTOS_Init+0x40>)
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	232d      	movs	r3, #45	; 0x2d
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_FREERTOS_Init+0x44>)
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	490d      	ldr	r1, [pc, #52]	; (80005c4 <MX_FREERTOS_Init+0x48>)
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <MX_FREERTOS_Init+0x4c>)
 8000592:	f002 fc10 	bl	8002db6 <xTaskCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <MX_FREERTOS_Init+0x50>)
 800059a:	6013      	str	r3, [r2, #0]
		  	  	  	  	  	  	  	  "This is vTaskCodeOne Task",
									  128,
									  (void *) &pvParameters_vTaskCodeOne,
									  45,
									  &xHandle_vTaskCodeOne);
  xReturned_vTaskCodeTwo = xTaskCreate(vTaskCodeTwo,
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_FREERTOS_Init+0x54>)
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	232e      	movs	r3, #46	; 0x2e
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_FREERTOS_Init+0x58>)
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	490b      	ldr	r1, [pc, #44]	; (80005d8 <MX_FREERTOS_Init+0x5c>)
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <MX_FREERTOS_Init+0x60>)
 80005ac:	f002 fc03 	bl	8002db6 <xTaskCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <MX_FREERTOS_Init+0x64>)
 80005b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000009c 	.word	0x2000009c
 80005c0:	20000000 	.word	0x20000000
 80005c4:	080058a8 	.word	0x080058a8
 80005c8:	080005e5 	.word	0x080005e5
 80005cc:	20000094 	.word	0x20000094
 80005d0:	200000a0 	.word	0x200000a0
 80005d4:	20000004 	.word	0x20000004
 80005d8:	080058c4 	.word	0x080058c4
 80005dc:	08000619 	.word	0x08000619
 80005e0:	20000098 	.word	0x20000098

080005e4 <vTaskCodeOne>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void vTaskCodeOne(void *pvParameters)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	uint32_t Local_pvParameters = *((uint32_t *)pvParameters);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60fb      	str	r3, [r7, #12]
    for( ;; )
    {
    	printf("vTaskCodeOne 0x%X => \n", Local_pvParameters);
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	4806      	ldr	r0, [pc, #24]	; (8000610 <vTaskCodeOne+0x2c>)
 80005f6:	f004 fab9 	bl	8004b6c <iprintf>
    	printf("vTaskCodeOne 0x%X -> \n", *((uint32_t *)pvParameters));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <vTaskCodeOne+0x30>)
 8000602:	f004 fab3 	bl	8004b6c <iprintf>
    	vTaskDelay(250);
 8000606:	20fa      	movs	r0, #250	; 0xfa
 8000608:	f002 fd1c 	bl	8003044 <vTaskDelay>
    	printf("vTaskCodeOne 0x%X => \n", Local_pvParameters);
 800060c:	e7f1      	b.n	80005f2 <vTaskCodeOne+0xe>
 800060e:	bf00      	nop
 8000610:	08005960 	.word	0x08005960
 8000614:	08005978 	.word	0x08005978

08000618 <vTaskCodeTwo>:
    }
}

void vTaskCodeTwo(void *pvParameters)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    for( ;; )
    {
    	printf("Student ID    : %i \n", ((Student_t *)pvParameters)->Student_ID);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <vTaskCodeTwo+0x2c>)
 8000628:	f004 faa0 	bl	8004b6c <iprintf>
    	printf("Student Grade : %i \n", ((Student_t *)pvParameters)->Student_Grade);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4619      	mov	r1, r3
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <vTaskCodeTwo+0x30>)
 8000634:	f004 fa9a 	bl	8004b6c <iprintf>
    	vTaskDelay(500);
 8000638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063c:	f002 fd02 	bl	8003044 <vTaskDelay>
    	printf("Student ID    : %i \n", ((Student_t *)pvParameters)->Student_ID);
 8000640:	e7ee      	b.n	8000620 <vTaskCodeTwo+0x8>
 8000642:	bf00      	nop
 8000644:	08005990 	.word	0x08005990
 8000648:	080059a8 	.word	0x080059a8

0800064c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <MX_GPIO_Init+0x9c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <MX_GPIO_Init+0x9c>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x9c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_GPIO_Init+0x9c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <MX_GPIO_Init+0x9c>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_GPIO_Init+0x9c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_GPIO_Init+0x9c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <MX_GPIO_Init+0x9c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_GPIO_Init+0x9c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <MX_GPIO_Init+0xa0>)
 80006be:	f000 fd3d 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin;
 80006c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_GPIO_Init+0xa0>)
 80006dc:	f000 fb92 	bl	8000e04 <HAL_GPIO_Init>

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020c00 	.word	0x40020c00

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 fa3e 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f80c 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f7ff ffa6 	bl	800064c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000700:	f001 fcde 	bl	80020c0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000704:	f7ff ff3a 	bl	800057c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000708:	f001 fcfe 	bl	8002108 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(250);
 800070c:	20fa      	movs	r0, #250	; 0xfa
 800070e:	f000 fa73 	bl	8000bf8 <HAL_Delay>
 8000712:	e7fb      	b.n	800070c <main+0x1c>

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fa77 	bl	8004c16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	; (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000774:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000788:	23a8      	movs	r3, #168	; 0xa8
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fce9 	bl	8001170 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 f832 	bl	800080c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2105      	movs	r1, #5
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 ff4a 	bl	8001660 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d2:	f000 f81b 	bl	800080c <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fa:	f000 f9dd 	bl	8000bb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40001000 	.word	0x40001000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <HAL_MspInit+0x54>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_MspInit+0x54>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 faa7 	bl	8000db0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	2036      	movs	r0, #54	; 0x36
 8000886:	f000 fa93 	bl	8000db0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800088a:	2036      	movs	r0, #54	; 0x36
 800088c:	f000 faac 	bl	8000de8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <HAL_InitTick+0xa4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <HAL_InitTick+0xa4>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_InitTick+0xa4>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f003 0310 	and.w	r3, r3, #16
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ac:	f107 0210 	add.w	r2, r7, #16
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 f8de 	bl	8001a78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008bc:	f001 f8c8 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 80008c0:	4603      	mov	r3, r0
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <HAL_InitTick+0xa8>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	0c9b      	lsrs	r3, r3, #18
 80008d0:	3b01      	subs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_InitTick+0xac>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <HAL_InitTick+0xb0>)
 80008d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_InitTick+0xac>)
 80008dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_InitTick+0xac>)
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_InitTick+0xac>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_InitTick+0xac>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008f4:	4809      	ldr	r0, [pc, #36]	; (800091c <HAL_InitTick+0xac>)
 80008f6:	f001 f8f1 	bl	8001adc <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d104      	bne.n	800090a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000900:	4806      	ldr	r0, [pc, #24]	; (800091c <HAL_InitTick+0xac>)
 8000902:	f001 f945 	bl	8001b90 <HAL_TIM_Base_Start_IT>
 8000906:	4603      	mov	r3, r0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3730      	adds	r7, #48	; 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	431bde83 	.word	0x431bde83
 800091c:	200000a4 	.word	0x200000a4
 8000920:	40001000 	.word	0x40001000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <TIM6_DAC_IRQHandler+0x10>)
 8000956:	f001 f98b 	bl	8001c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000a4 	.word	0x200000a4

08000964 <Custome_ITM_SendChar_Ch0>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00)

void Custome_ITM_SendChar_Ch0(uint8_t _data)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> DWT and ITM units enabled */
	DEMCR |= ( 1 << 24);
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <Custome_ITM_SendChar_Ch0+0x48>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <Custome_ITM_SendChar_Ch0+0x48>)
 8000974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000978:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <Custome_ITM_SendChar_Ch0+0x4c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a0c      	ldr	r2, [pc, #48]	; (80009b0 <Custome_ITM_SendChar_Ch0+0x4c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000986:	bf00      	nop
 8000988:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f8      	beq.n	8000988 <Custome_ITM_SendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 8000996:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	6013      	str	r3, [r2, #0]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000edfc 	.word	0xe000edfc
 80009b0:	e0000e00 	.word	0xe0000e00

080009b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e00a      	b.n	80009dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009c6:	f3af 8000 	nop.w
 80009ca:	4601      	mov	r1, r0
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	60ba      	str	r2, [r7, #8]
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbf0      	blt.n	80009c6 <_read+0x12>
	}

return len;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	e009      	b.n	8000a14 <_write+0x26>
	{
		 /* __io_putchar(*ptr++); */
		Custome_ITM_SendChar_Ch0(*ptr++);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ffab 	bl	8000964 <Custome_ITM_SendChar_Ch0>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbf1      	blt.n	8000a00 <_write+0x12>
	}
	return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_close>:

int _close(int file)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <_isatty>:

int _isatty(int file)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	return 1;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f004 f8f8 	bl	8004cb4 <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20020000 	.word	0x20020000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	200000ec 	.word	0x200000ec
 8000af8:	20004b98 	.word	0x20004b98

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b26:	490e      	ldr	r1, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b28:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b3c:	4c0b      	ldr	r4, [pc, #44]	; (8000b6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b4a:	f7ff ffd7 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f004 f8b7 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b52:	f7ff fdcd 	bl	80006f0 <main>
  bx  lr    
 8000b56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000b64:	08005a34 	.word	0x08005a34
  ldr r2, =_sbss
 8000b68:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000b6c:	20004b98 	.word	0x20004b98

08000b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <HAL_Init+0x40>)
 8000b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_Init+0x40>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_Init+0x40>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f8fc 	bl	8000d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f7ff fe64 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff fe36 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023c00 	.word	0x40023c00

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000014 	.word	0x20000014
 8000bdc:	200000f0 	.word	0x200000f0

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200000f0 	.word	0x200000f0

08000bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c00:	f7ff ffee 	bl	8000be0 <HAL_GetTick>
 8000c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c10:	d005      	beq.n	8000c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_Delay+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c1e:	bf00      	nop
 8000c20:	f7ff ffde 	bl	8000be0 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d8f7      	bhi.n	8000c20 <HAL_Delay+0x28>
  {
  }
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000014 	.word	0x20000014

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	; (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff4c 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc2:	f7ff ff61 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	6978      	ldr	r0, [r7, #20]
 8000dce:	f7ff ffb1 	bl	8000d34 <NVIC_EncodePriority>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff80 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff54 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e16b      	b.n	80010f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f040 815a 	bne.w	80010f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d005      	beq.n	8000e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d130      	bne.n	8000eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d017      	beq.n	8000ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d123      	bne.n	8000f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	69b9      	ldr	r1, [r7, #24]
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0203 	and.w	r2, r3, #3
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80b4 	beq.w	80010f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b60      	ldr	r3, [pc, #384]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a5f      	ldr	r2, [pc, #380]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <HAL_GPIO_Init+0x30c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa6:	4a5b      	ldr	r2, [pc, #364]	; (8001114 <HAL_GPIO_Init+0x310>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a52      	ldr	r2, [pc, #328]	; (8001118 <HAL_GPIO_Init+0x314>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d02b      	beq.n	800102a <HAL_GPIO_Init+0x226>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a51      	ldr	r2, [pc, #324]	; (800111c <HAL_GPIO_Init+0x318>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x222>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a50      	ldr	r2, [pc, #320]	; (8001120 <HAL_GPIO_Init+0x31c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x21e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4f      	ldr	r2, [pc, #316]	; (8001124 <HAL_GPIO_Init+0x320>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x21a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <HAL_GPIO_Init+0x324>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x216>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	; (800112c <HAL_GPIO_Init+0x328>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x212>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	; (8001130 <HAL_GPIO_Init+0x32c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x20e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4b      	ldr	r2, [pc, #300]	; (8001134 <HAL_GPIO_Init+0x330>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x20a>
 800100a:	2307      	movs	r3, #7
 800100c:	e00e      	b.n	800102c <HAL_GPIO_Init+0x228>
 800100e:	2308      	movs	r3, #8
 8001010:	e00c      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001012:	2306      	movs	r3, #6
 8001014:	e00a      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001016:	2305      	movs	r3, #5
 8001018:	e008      	b.n	800102c <HAL_GPIO_Init+0x228>
 800101a:	2304      	movs	r3, #4
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x228>
 800101e:	2303      	movs	r3, #3
 8001020:	e004      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001022:	2302      	movs	r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x228>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <HAL_GPIO_Init+0x228>
 800102a:	2300      	movs	r3, #0
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	4093      	lsls	r3, r2
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800103c:	4935      	ldr	r1, [pc, #212]	; (8001114 <HAL_GPIO_Init+0x310>)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104a:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <HAL_GPIO_Init+0x334>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106e:	4a32      	ldr	r2, [pc, #200]	; (8001138 <HAL_GPIO_Init+0x334>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <HAL_GPIO_Init+0x334>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001098:	4a27      	ldr	r2, [pc, #156]	; (8001138 <HAL_GPIO_Init+0x334>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_GPIO_Init+0x334>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	f67f ae90 	bls.w	8000e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40021400 	.word	0x40021400
 8001130:	40021800 	.word	0x40021800
 8001134:	40021c00 	.word	0x40021c00
 8001138:	40013c00 	.word	0x40013c00

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	619a      	str	r2, [r3, #24]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e267      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118e:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119a:	4b85      	ldr	r3, [pc, #532]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a6:	4b82      	ldr	r3, [pc, #520]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b2:	d10b      	bne.n	80011cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	4b7e      	ldr	r3, [pc, #504]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d05b      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d157      	bne.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e242      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d4:	d106      	bne.n	80011e4 <HAL_RCC_OscConfig+0x74>
 80011d6:	4b76      	ldr	r3, [pc, #472]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a75      	ldr	r2, [pc, #468]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0x98>
 80011ee:	4b70      	ldr	r3, [pc, #448]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a6f      	ldr	r2, [pc, #444]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6c      	ldr	r2, [pc, #432]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xb0>
 8001208:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a68      	ldr	r2, [pc, #416]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a65      	ldr	r2, [pc, #404]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcda 	bl	8000be0 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fcd6 	bl	8000be0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e207      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b5b      	ldr	r3, [pc, #364]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xc0>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fcc6 	bl	8000be0 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fcc2 	bl	8000be0 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1f3      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001286:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129e:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1c7      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4937      	ldr	r1, [pc, #220]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_RCC_OscConfig+0x244>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fc7b 	bl	8000be0 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc77 	bl	8000be0 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e1a8      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4925      	ldr	r1, [pc, #148]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_RCC_OscConfig+0x244>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001328:	f7ff fc5a 	bl	8000be0 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc56 	bl	8000be0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e187      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d036      	beq.n	80013c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d016      	beq.n	8001390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff fc3a 	bl	8000be0 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fc36 	bl	8000be0 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e167      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_RCC_OscConfig+0x240>)
 8001384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x200>
 800138e:	e01b      	b.n	80013c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_RCC_OscConfig+0x248>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fc23 	bl	8000be0 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	e00e      	b.n	80013bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fc1f 	bl	8000be0 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d907      	bls.n	80013bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e150      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
 80013b0:	40023800 	.word	0x40023800
 80013b4:	42470000 	.word	0x42470000
 80013b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013bc:	4b88      	ldr	r3, [pc, #544]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ea      	bne.n	800139e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8097 	beq.w	8001504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013da:	4b81      	ldr	r3, [pc, #516]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10f      	bne.n	8001406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b7d      	ldr	r3, [pc, #500]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a7c      	ldr	r2, [pc, #496]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b7a      	ldr	r3, [pc, #488]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d118      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001412:	4b74      	ldr	r3, [pc, #464]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a73      	ldr	r2, [pc, #460]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141e:	f7ff fbdf 	bl	8000be0 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001426:	f7ff fbdb 	bl	8000be0 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e10c      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <HAL_RCC_OscConfig+0x474>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x2ea>
 800144c:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	4a63      	ldr	r2, [pc, #396]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6713      	str	r3, [r2, #112]	; 0x70
 8001458:	e01c      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b05      	cmp	r3, #5
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x30c>
 8001462:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	4a5e      	ldr	r2, [pc, #376]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6713      	str	r3, [r2, #112]	; 0x70
 800146e:	4b5c      	ldr	r3, [pc, #368]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	4a5b      	ldr	r2, [pc, #364]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6713      	str	r3, [r2, #112]	; 0x70
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x324>
 800147c:	4b58      	ldr	r3, [pc, #352]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a57      	ldr	r2, [pc, #348]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	4a54      	ldr	r2, [pc, #336]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800148e:	f023 0304 	bic.w	r3, r3, #4
 8001492:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d015      	beq.n	80014c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fba0 	bl	8000be0 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a4:	f7ff fb9c 	bl	8000be0 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0cb      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ba:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ee      	beq.n	80014a4 <HAL_RCC_OscConfig+0x334>
 80014c6:	e014      	b.n	80014f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fb8a 	bl	8000be0 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d0:	f7ff fb86 	bl	8000be0 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	; 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e0b5      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e6:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1ee      	bne.n	80014d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f8:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80014fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a1 	beq.w	8001650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800150e:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d05c      	beq.n	80015d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d141      	bne.n	80015a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <HAL_RCC_OscConfig+0x478>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fb5a 	bl	8000be0 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fb56 	bl	8000be0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e087      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	019b      	lsls	r3, r3, #6
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	3b01      	subs	r3, #1
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	491b      	ldr	r1, [pc, #108]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x478>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fb2f 	bl	8000be0 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fb2b 	bl	8000be0 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e05c      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x416>
 80015a4:	e054      	b.n	8001650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_RCC_OscConfig+0x478>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb18 	bl	8000be0 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb14 	bl	8000be0 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e045      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x444>
 80015d2:	e03d      	b.n	8001650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e038      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000
 80015e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_OscConfig+0x4ec>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d028      	beq.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d121      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d11a      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800161c:	4013      	ands	r3, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001624:	4293      	cmp	r3, r2
 8001626:	d111      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	085b      	lsrs	r3, r3, #1
 8001634:	3b01      	subs	r3, #1
 8001636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0cc      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90c      	bls.n	800169c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b65      	ldr	r3, [pc, #404]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b8      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494d      	ldr	r1, [pc, #308]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d044      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d003      	beq.n	800171e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171a:	2b03      	cmp	r3, #3
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e06f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e067      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4934      	ldr	r1, [pc, #208]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff fa46 	bl	8000be0 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff fa42 	bl	8000be0 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04f      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d20c      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e032      	b.n	800180e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4916      	ldr	r1, [pc, #88]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f821 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	490a      	ldr	r1, [pc, #40]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f832 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00
 800181c:	40023800 	.word	0x40023800
 8001820:	080059d8 	.word	0x080059d8
 8001824:	2000000c 	.word	0x2000000c
 8001828:	20000010 	.word	0x20000010

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001830:	b094      	sub	sp, #80	; 0x50
 8001832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	647b      	str	r3, [r7, #68]	; 0x44
 8001838:	2300      	movs	r3, #0
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800183c:	2300      	movs	r3, #0
 800183e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001844:	4b79      	ldr	r3, [pc, #484]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d00d      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x40>
 8001850:	2b08      	cmp	r3, #8
 8001852:	f200 80e1 	bhi.w	8001a18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x34>
 800185a:	2b04      	cmp	r3, #4
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x3a>
 800185e:	e0db      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001860:	4b73      	ldr	r3, [pc, #460]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001862:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001864:	e0db      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001866:	4b73      	ldr	r3, [pc, #460]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001868:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800186a:	e0d8      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800186c:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d063      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001882:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	099b      	lsrs	r3, r3, #6
 8001888:	2200      	movs	r2, #0
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
 800188c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
 800189a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800189e:	4622      	mov	r2, r4
 80018a0:	462b      	mov	r3, r5
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0159      	lsls	r1, r3, #5
 80018ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b0:	0150      	lsls	r0, r2, #5
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4621      	mov	r1, r4
 80018b8:	1a51      	subs	r1, r2, r1
 80018ba:	6139      	str	r1, [r7, #16]
 80018bc:	4629      	mov	r1, r5
 80018be:	eb63 0301 	sbc.w	r3, r3, r1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018d0:	4659      	mov	r1, fp
 80018d2:	018b      	lsls	r3, r1, #6
 80018d4:	4651      	mov	r1, sl
 80018d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018da:	4651      	mov	r1, sl
 80018dc:	018a      	lsls	r2, r1, #6
 80018de:	4651      	mov	r1, sl
 80018e0:	ebb2 0801 	subs.w	r8, r2, r1
 80018e4:	4659      	mov	r1, fp
 80018e6:	eb63 0901 	sbc.w	r9, r3, r1
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018fe:	4690      	mov	r8, r2
 8001900:	4699      	mov	r9, r3
 8001902:	4623      	mov	r3, r4
 8001904:	eb18 0303 	adds.w	r3, r8, r3
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	462b      	mov	r3, r5
 800190c:	eb49 0303 	adc.w	r3, r9, r3
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800191e:	4629      	mov	r1, r5
 8001920:	024b      	lsls	r3, r1, #9
 8001922:	4621      	mov	r1, r4
 8001924:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001928:	4621      	mov	r1, r4
 800192a:	024a      	lsls	r2, r1, #9
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001932:	2200      	movs	r2, #0
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
 8001936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001938:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800193c:	f7fe fc98 	bl	8000270 <__aeabi_uldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4613      	mov	r3, r2
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001948:	e058      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2200      	movs	r2, #0
 8001952:	4618      	mov	r0, r3
 8001954:	4611      	mov	r1, r2
 8001956:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
 8001960:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001964:	4642      	mov	r2, r8
 8001966:	464b      	mov	r3, r9
 8001968:	f04f 0000 	mov.w	r0, #0
 800196c:	f04f 0100 	mov.w	r1, #0
 8001970:	0159      	lsls	r1, r3, #5
 8001972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001976:	0150      	lsls	r0, r2, #5
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4641      	mov	r1, r8
 800197e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001982:	4649      	mov	r1, r9
 8001984:	eb63 0b01 	sbc.w	fp, r3, r1
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001994:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001998:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800199c:	ebb2 040a 	subs.w	r4, r2, sl
 80019a0:	eb63 050b 	sbc.w	r5, r3, fp
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	00eb      	lsls	r3, r5, #3
 80019ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b2:	00e2      	lsls	r2, r4, #3
 80019b4:	4614      	mov	r4, r2
 80019b6:	461d      	mov	r5, r3
 80019b8:	4643      	mov	r3, r8
 80019ba:	18e3      	adds	r3, r4, r3
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	464b      	mov	r3, r9
 80019c0:	eb45 0303 	adc.w	r3, r5, r3
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d2:	4629      	mov	r1, r5
 80019d4:	028b      	lsls	r3, r1, #10
 80019d6:	4621      	mov	r1, r4
 80019d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019dc:	4621      	mov	r1, r4
 80019de:	028a      	lsls	r2, r1, #10
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e6:	2200      	movs	r2, #0
 80019e8:	61bb      	str	r3, [r7, #24]
 80019ea:	61fa      	str	r2, [r7, #28]
 80019ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f0:	f7fe fc3e 	bl	8000270 <__aeabi_uldivmod>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4613      	mov	r3, r2
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x200>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	0c1b      	lsrs	r3, r3, #16
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	3301      	adds	r3, #1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a16:	e002      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3750      	adds	r7, #80	; 0x50
 8001a24:	46bd      	mov	sp, r7
 8001a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	00f42400 	.word	0x00f42400
 8001a34:	007a1200 	.word	0x007a1200

08001a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a54:	f7ff fff0 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	0a9b      	lsrs	r3, r3, #10
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4903      	ldr	r1, [pc, #12]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	080059e8 	.word	0x080059e8

08001a78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	220f      	movs	r2, #15
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <HAL_RCC_GetClockConfig+0x60>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0207 	and.w	r2, r3, #7
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	601a      	str	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e041      	b.n	8001b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f839 	bl	8001b7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 f9d8 	bl	8001ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d001      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e04e      	b.n	8001c46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_TIM_Base_Start_IT+0xc4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d022      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd2:	d01d      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d018      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_TIM_Base_Start_IT+0xcc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d013      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00e      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d009      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d004      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x80>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d111      	bne.n	8001c34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d010      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c32:	e007      	b.n	8001c44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40010000 	.word	0x40010000
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40000800 	.word	0x40000800
 8001c60:	40000c00 	.word	0x40000c00
 8001c64:	40010400 	.word	0x40010400
 8001c68:	40014000 	.word	0x40014000
 8001c6c:	40001800 	.word	0x40001800

08001c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d122      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d11b      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0202 	mvn.w	r2, #2
 8001c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8ee 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f8e0 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f8f1 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d122      	bne.n	8001d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d11b      	bne.n	8001d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0204 	mvn.w	r2, #4
 8001cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8c4 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8b6 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f8c7 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d122      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d11b      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0208 	mvn.w	r2, #8
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f89a 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f88c 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f89d 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0210 	mvn.w	r2, #16
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f870 	bl	8001e94 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f862 	bl	8001e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f873 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0201 	mvn.w	r2, #1
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fcfa 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0c:	2b80      	cmp	r3, #128	; 0x80
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f902 	bl	8002024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f838 	bl	8001ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0220 	mvn.w	r2, #32
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8cc 	bl	8002010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a40      	ldr	r2, [pc, #256]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eee:	d00f      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <TIM_Base_SetConfig+0x118>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00b      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3c      	ldr	r2, [pc, #240]	; (8001fec <TIM_Base_SetConfig+0x11c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3b      	ldr	r2, [pc, #236]	; (8001ff0 <TIM_Base_SetConfig+0x120>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d003      	beq.n	8001f10 <TIM_Base_SetConfig+0x40>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3a      	ldr	r2, [pc, #232]	; (8001ff4 <TIM_Base_SetConfig+0x124>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d108      	bne.n	8001f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d02b      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f30:	d027      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <TIM_Base_SetConfig+0x118>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d023      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <TIM_Base_SetConfig+0x11c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2a      	ldr	r2, [pc, #168]	; (8001ff0 <TIM_Base_SetConfig+0x120>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01b      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <TIM_Base_SetConfig+0x124>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d017      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <TIM_Base_SetConfig+0x128>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <TIM_Base_SetConfig+0x12c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00f      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a26      	ldr	r2, [pc, #152]	; (8002000 <TIM_Base_SetConfig+0x130>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00b      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <TIM_Base_SetConfig+0x134>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d007      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <TIM_Base_SetConfig+0x138>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d003      	beq.n	8001f82 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a23      	ldr	r2, [pc, #140]	; (800200c <TIM_Base_SetConfig+0x13c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <TIM_Base_SetConfig+0x114>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <TIM_Base_SetConfig+0xf8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <TIM_Base_SetConfig+0x124>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d103      	bne.n	8001fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	615a      	str	r2, [r3, #20]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	40000c00 	.word	0x40000c00
 8001ff4:	40010400 	.word	0x40010400
 8001ff8:	40014000 	.word	0x40014000
 8001ffc:	40014400 	.word	0x40014400
 8002000:	40014800 	.word	0x40014800
 8002004:	40001800 	.word	0x40001800
 8002008:	40001c00 	.word	0x40001c00
 800200c:	40002000 	.word	0x40002000

08002010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <__NVIC_SetPriority>:
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Handler+0x1c>)
 8002092:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002094:	f001 fc54 	bl	8003940 <xTaskGetSchedulerState>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800209e:	f002 fa3b 	bl	8004518 <xPortSysTickHandler>
  }
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80020b0:	2100      	movs	r1, #0
 80020b2:	f06f 0004 	mvn.w	r0, #4
 80020b6:	f7ff ffbf 	bl	8002038 <__NVIC_SetPriority>
#endif
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020c6:	f3ef 8305 	mrs	r3, IPSR
 80020ca:	603b      	str	r3, [r7, #0]
  return(result);
 80020cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80020d2:	f06f 0305 	mvn.w	r3, #5
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	e00c      	b.n	80020f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <osKernelInitialize+0x44>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <osKernelInitialize+0x44>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	e002      	b.n	80020f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020f4:	687b      	ldr	r3, [r7, #4]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	200000f4 	.word	0x200000f4

08002108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800210e:	f3ef 8305 	mrs	r3, IPSR
 8002112:	603b      	str	r3, [r7, #0]
  return(result);
 8002114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <osKernelStart+0x1a>
    stat = osErrorISR;
 800211a:	f06f 0305 	mvn.w	r3, #5
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	e010      	b.n	8002144 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <osKernelStart+0x48>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d109      	bne.n	800213e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800212a:	f7ff ffbf 	bl	80020ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <osKernelStart+0x48>)
 8002130:	2202      	movs	r2, #2
 8002132:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002134:	f000 ffba 	bl	80030ac <vTaskStartScheduler>
      stat = osOK;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	e002      	b.n	8002144 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200000f4 	.word	0x200000f4

08002154 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a07      	ldr	r2, [pc, #28]	; (8002180 <vApplicationGetIdleTaskMemory+0x2c>)
 8002164:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <vApplicationGetIdleTaskMemory+0x30>)
 800216a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	200000f8 	.word	0x200000f8
 8002184:	20000158 	.word	0x20000158

08002188 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002198:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <vApplicationGetTimerTaskMemory+0x30>)
 800219e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	20000358 	.word	0x20000358
 80021b8:	200003b8 	.word	0x200003b8

080021bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f103 0208 	add.w	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f103 0208 	add.w	r2, r3, #8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 0208 	add.w	r2, r3, #8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d103      	bne.n	800227e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e00c      	b.n	8002298 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3308      	adds	r3, #8
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e002      	b.n	800228c <vListInsert+0x2e>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	d2f6      	bcs.n	8002286 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	601a      	str	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6852      	ldr	r2, [r2, #4]
 80022f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d103      	bne.n	8002304 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800234a:	bf00      	nop
 800234c:	e7fe      	b.n	800234c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800234e:	f002 f851 	bl	80043f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	441a      	add	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	3b01      	subs	r3, #1
 8002380:	68f9      	ldr	r1, [r7, #12]
 8002382:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	441a      	add	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	22ff      	movs	r2, #255	; 0xff
 8002392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	22ff      	movs	r2, #255	; 0xff
 800239a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d114      	bne.n	80023ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01a      	beq.n	80023e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3310      	adds	r3, #16
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 f905 	bl	80035c0 <xTaskRemoveFromEventList>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d012      	beq.n	80023e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <xQueueGenericReset+0xcc>)
 80023be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	e009      	b.n	80023e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3310      	adds	r3, #16
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fef2 	bl	80021bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3324      	adds	r3, #36	; 0x24
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff feed 	bl	80021bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023e2:	f002 f837 	bl	8004454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	e000ed04 	.word	0xe000ed04

080023f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08e      	sub	sp, #56	; 0x38
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800241a:	bf00      	nop
 800241c:	e7fe      	b.n	800241c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002436:	bf00      	nop
 8002438:	e7fe      	b.n	8002438 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <xQueueGenericCreateStatic+0x52>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <xQueueGenericCreateStatic+0x56>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <xQueueGenericCreateStatic+0x58>
 800244a:	2300      	movs	r3, #0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10a      	bne.n	8002466 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	623b      	str	r3, [r7, #32]
}
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <xQueueGenericCreateStatic+0x7e>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <xQueueGenericCreateStatic+0x82>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <xQueueGenericCreateStatic+0x84>
 8002476:	2300      	movs	r3, #0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	61fb      	str	r3, [r7, #28]
}
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002492:	2350      	movs	r3, #80	; 0x50
 8002494:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b50      	cmp	r3, #80	; 0x50
 800249a:	d00a      	beq.n	80024b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	61bb      	str	r3, [r7, #24]
}
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80024b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f805 	bl	80024e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80024dc:	4618      	mov	r0, r3
 80024de:	3730      	adds	r7, #48	; 0x30
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d103      	bne.n	8002500 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e002      	b.n	8002506 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002512:	2101      	movs	r1, #1
 8002514:	69b8      	ldr	r0, [r7, #24]
 8002516:	f7ff ff05 	bl	8002324 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08e      	sub	sp, #56	; 0x38
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800253a:	2300      	movs	r3, #0
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <xQueueGenericSend+0x32>
	__asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d103      	bne.n	800256c <xQueueGenericSend+0x40>
 8002564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <xQueueGenericSend+0x44>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <xQueueGenericSend+0x46>
 8002570:	2300      	movs	r3, #0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <xQueueGenericSend+0x60>
	__asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002588:	bf00      	nop
 800258a:	e7fe      	b.n	800258a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d103      	bne.n	800259a <xQueueGenericSend+0x6e>
 8002592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <xQueueGenericSend+0x72>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <xQueueGenericSend+0x74>
 800259e:	2300      	movs	r3, #0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <xQueueGenericSend+0x8e>
	__asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	623b      	str	r3, [r7, #32]
}
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025ba:	f001 f9c1 	bl	8003940 <xTaskGetSchedulerState>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <xQueueGenericSend+0x9e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <xQueueGenericSend+0xa2>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <xQueueGenericSend+0xa4>
 80025ce:	2300      	movs	r3, #0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <xQueueGenericSend+0xbe>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	61fb      	str	r3, [r7, #28]
}
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025ea:	f001 ff03 	bl	80043f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <xQueueGenericSend+0xd4>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d129      	bne.n	8002654 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002606:	f000 fa0b 	bl	8002a20 <prvCopyDataToQueue>
 800260a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	3324      	adds	r3, #36	; 0x24
 8002618:	4618      	mov	r0, r3
 800261a:	f000 ffd1 	bl	80035c0 <xTaskRemoveFromEventList>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002624:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <xQueueGenericSend+0x1f8>)
 8002626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	e00a      	b.n	800264c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <xQueueGenericSend+0x1f8>)
 800263e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800264c:	f001 ff02 	bl	8004454 <vPortExitCritical>
				return pdPASS;
 8002650:	2301      	movs	r3, #1
 8002652:	e063      	b.n	800271c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800265a:	f001 fefb 	bl	8004454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800265e:	2300      	movs	r3, #0
 8002660:	e05c      	b.n	800271c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4618      	mov	r0, r3
 800266e:	f001 f80b 	bl	8003688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002672:	2301      	movs	r3, #1
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002676:	f001 feed 	bl	8004454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800267a:	f000 fd7d 	bl	8003178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800267e:	f001 feb9 	bl	80043f4 <vPortEnterCritical>
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002688:	b25b      	sxtb	r3, r3
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d103      	bne.n	8002698 <xQueueGenericSend+0x16c>
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d103      	bne.n	80026ae <xQueueGenericSend+0x182>
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026ae:	f001 fed1 	bl	8004454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026b2:	1d3a      	adds	r2, r7, #4
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fffa 	bl	80036b4 <xTaskCheckForTimeOut>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d124      	bne.n	8002710 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c8:	f000 faa2 	bl	8002c10 <prvIsQueueFull>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d018      	beq.n	8002704 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	3310      	adds	r3, #16
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 ff20 	bl	8003520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e2:	f000 fa2d 	bl	8002b40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026e6:	f000 fd55 	bl	8003194 <xTaskResumeAll>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f47f af7c 	bne.w	80025ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <xQueueGenericSend+0x1f8>)
 80026f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	e772      	b.n	80025ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002706:	f000 fa1b 	bl	8002b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800270a:	f000 fd43 	bl	8003194 <xTaskResumeAll>
 800270e:	e76c      	b.n	80025ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002712:	f000 fa15 	bl	8002b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002716:	f000 fd3d 	bl	8003194 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800271a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800271c:	4618      	mov	r0, r3
 800271e:	3738      	adds	r7, #56	; 0x38
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	e000ed04 	.word	0xe000ed04

08002728 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b090      	sub	sp, #64	; 0x40
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002752:	bf00      	nop
 8002754:	e7fe      	b.n	8002754 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <xQueueGenericSendFromISR+0x3c>
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <xQueueGenericSendFromISR+0x40>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <xQueueGenericSendFromISR+0x42>
 8002768:	2300      	movs	r3, #0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002780:	bf00      	nop
 8002782:	e7fe      	b.n	8002782 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d103      	bne.n	8002792 <xQueueGenericSendFromISR+0x6a>
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <xQueueGenericSendFromISR+0x6e>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <xQueueGenericSendFromISR+0x70>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	623b      	str	r3, [r7, #32]
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027b2:	f001 ff01 	bl	80045b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80027b6:	f3ef 8211 	mrs	r2, BASEPRI
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	61fa      	str	r2, [r7, #28]
 80027cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <xQueueGenericSendFromISR+0xbc>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d12f      	bne.n	8002844 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027fa:	f000 f911 	bl	8002a20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002806:	d112      	bne.n	800282e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2b00      	cmp	r3, #0
 800280e:	d016      	beq.n	800283e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	3324      	adds	r3, #36	; 0x24
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fed3 	bl	80035c0 <xTaskRemoveFromEventList>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00e      	beq.n	800283e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e007      	b.n	800283e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800282e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002832:	3301      	adds	r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	b25a      	sxtb	r2, r3
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800283e:	2301      	movs	r3, #1
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002842:	e001      	b.n	8002848 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002844:	2300      	movs	r3, #0
 8002846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002852:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002856:	4618      	mov	r0, r3
 8002858:	3740      	adds	r7, #64	; 0x40
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08c      	sub	sp, #48	; 0x30
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800286c:	2300      	movs	r3, #0
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <xQueueReceive+0x30>
	__asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	623b      	str	r3, [r7, #32]
}
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d103      	bne.n	800289e <xQueueReceive+0x3e>
 8002896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <xQueueReceive+0x42>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <xQueueReceive+0x44>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <xQueueReceive+0x5e>
	__asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	61fb      	str	r3, [r7, #28]
}
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028be:	f001 f83f 	bl	8003940 <xTaskGetSchedulerState>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <xQueueReceive+0x6e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <xQueueReceive+0x72>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <xQueueReceive+0x74>
 80028d2:	2300      	movs	r3, #0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <xQueueReceive+0x8e>
	__asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	61bb      	str	r3, [r7, #24]
}
 80028ea:	bf00      	nop
 80028ec:	e7fe      	b.n	80028ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028ee:	f001 fd81 	bl	80043f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01f      	beq.n	800293e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002902:	f000 f8f7 	bl	8002af4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	1e5a      	subs	r2, r3, #1
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00f      	beq.n	8002936 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	3310      	adds	r3, #16
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fe50 	bl	80035c0 <xTaskRemoveFromEventList>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <xQueueReceive+0x1bc>)
 8002928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002936:	f001 fd8d 	bl	8004454 <vPortExitCritical>
				return pdPASS;
 800293a:	2301      	movs	r3, #1
 800293c:	e069      	b.n	8002a12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002944:	f001 fd86 	bl	8004454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002948:	2300      	movs	r3, #0
 800294a:	e062      	b.n	8002a12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fe96 	bl	8003688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800295c:	2301      	movs	r3, #1
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002960:	f001 fd78 	bl	8004454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002964:	f000 fc08 	bl	8003178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002968:	f001 fd44 	bl	80043f4 <vPortEnterCritical>
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002972:	b25b      	sxtb	r3, r3
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d103      	bne.n	8002982 <xQueueReceive+0x122>
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002988:	b25b      	sxtb	r3, r3
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298e:	d103      	bne.n	8002998 <xQueueReceive+0x138>
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002998:	f001 fd5c 	bl	8004454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800299c:	1d3a      	adds	r2, r7, #4
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fe85 	bl	80036b4 <xTaskCheckForTimeOut>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d123      	bne.n	80029f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f000 f917 	bl	8002be4 <prvIsQueueEmpty>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d017      	beq.n	80029ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	3324      	adds	r3, #36	; 0x24
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fdab 	bl	8003520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029cc:	f000 f8b8 	bl	8002b40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029d0:	f000 fbe0 	bl	8003194 <xTaskResumeAll>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d189      	bne.n	80028ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <xQueueReceive+0x1bc>)
 80029dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	e780      	b.n	80028ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ee:	f000 f8a7 	bl	8002b40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029f2:	f000 fbcf 	bl	8003194 <xTaskResumeAll>
 80029f6:	e77a      	b.n	80028ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029fa:	f000 f8a1 	bl	8002b40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029fe:	f000 fbc9 	bl	8003194 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a04:	f000 f8ee 	bl	8002be4 <prvIsQueueEmpty>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f43f af6f 	beq.w	80028ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3730      	adds	r7, #48	; 0x30
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	e000ed04 	.word	0xe000ed04

08002a20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d14d      	bne.n	8002ae2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 ff96 	bl	800397c <xTaskPriorityDisinherit>
 8002a50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	e043      	b.n	8002ae2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d119      	bne.n	8002a94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6858      	ldr	r0, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	f002 f94e 	bl	8004d0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	441a      	add	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d32b      	bcc.n	8002ae2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	e026      	b.n	8002ae2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	68d8      	ldr	r0, [r3, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	f002 f934 	bl	8004d0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	425b      	negs	r3, r3
 8002aae:	441a      	add	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d207      	bcs.n	8002ad0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	425b      	negs	r3, r3
 8002aca:	441a      	add	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d105      	bne.n	8002ae2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002aea:	697b      	ldr	r3, [r7, #20]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	441a      	add	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d303      	bcc.n	8002b28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68d9      	ldr	r1, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	461a      	mov	r2, r3
 8002b32:	6838      	ldr	r0, [r7, #0]
 8002b34:	f002 f8ea 	bl	8004d0c <memcpy>
	}
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b48:	f001 fc54 	bl	80043f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b54:	e011      	b.n	8002b7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3324      	adds	r3, #36	; 0x24
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fd2c 	bl	80035c0 <xTaskRemoveFromEventList>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b6e:	f000 fe03 	bl	8003778 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	dce9      	bgt.n	8002b56 <prvUnlockQueue+0x16>
 8002b82:	e000      	b.n	8002b86 <prvUnlockQueue+0x46>
					break;
 8002b84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	22ff      	movs	r2, #255	; 0xff
 8002b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b8e:	f001 fc61 	bl	8004454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b92:	f001 fc2f 	bl	80043f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b9e:	e011      	b.n	8002bc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d012      	beq.n	8002bce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3310      	adds	r3, #16
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fd07 	bl	80035c0 <xTaskRemoveFromEventList>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002bb8:	f000 fdde 	bl	8003778 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	dce9      	bgt.n	8002ba0 <prvUnlockQueue+0x60>
 8002bcc:	e000      	b.n	8002bd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002bce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	22ff      	movs	r2, #255	; 0xff
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002bd8:	f001 fc3c 	bl	8004454 <vPortExitCritical>
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bec:	f001 fc02 	bl	80043f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e001      	b.n	8002c02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c02:	f001 fc27 	bl	8004454 <vPortExitCritical>

	return xReturn;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c18:	f001 fbec 	bl	80043f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d102      	bne.n	8002c2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e001      	b.n	8002c32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c32:	f001 fc0f 	bl	8004454 <vPortExitCritical>

	return xReturn;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e014      	b.n	8002c7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c50:	4a0f      	ldr	r2, [pc, #60]	; (8002c90 <vQueueAddToRegistry+0x50>)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10b      	bne.n	8002c74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c5c:	490c      	ldr	r1, [pc, #48]	; (8002c90 <vQueueAddToRegistry+0x50>)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <vQueueAddToRegistry+0x50>)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c72:	e006      	b.n	8002c82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3301      	adds	r3, #1
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b07      	cmp	r3, #7
 8002c7e:	d9e7      	bls.n	8002c50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	200007b8 	.word	0x200007b8

08002c94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ca4:	f001 fba6 	bl	80043f4 <vPortEnterCritical>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d103      	bne.n	8002cbe <vQueueWaitForMessageRestricted+0x2a>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cc4:	b25b      	sxtb	r3, r3
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d103      	bne.n	8002cd4 <vQueueWaitForMessageRestricted+0x40>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd4:	f001 fbbe 	bl	8004454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3324      	adds	r3, #36	; 0x24
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fc3d 	bl	8003568 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cee:	6978      	ldr	r0, [r7, #20]
 8002cf0:	f7ff ff26 	bl	8002b40 <prvUnlockQueue>
	}
 8002cf4:	bf00      	nop
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08e      	sub	sp, #56	; 0x38
 8002d00:	af04      	add	r7, sp, #16
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	623b      	str	r3, [r7, #32]
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <xTaskCreateStatic+0x46>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	61fb      	str	r3, [r7, #28]
}
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d42:	2360      	movs	r3, #96	; 0x60
 8002d44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b60      	cmp	r3, #96	; 0x60
 8002d4a:	d00a      	beq.n	8002d62 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	61bb      	str	r3, [r7, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01e      	beq.n	8002da8 <xTaskCreateStatic+0xac>
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01b      	beq.n	8002da8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d82:	2300      	movs	r3, #0
 8002d84:	9303      	str	r3, [sp, #12]
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f850 	bl	8002e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002da2:	f000 f8df 	bl	8002f64 <prvAddNewTaskToReadyList>
 8002da6:	e001      	b.n	8002dac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002dac:	697b      	ldr	r3, [r7, #20]
	}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3728      	adds	r7, #40	; 0x28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b08c      	sub	sp, #48	; 0x30
 8002dba:	af04      	add	r7, sp, #16
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 fc34 	bl	8004638 <pvPortMalloc>
 8002dd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00e      	beq.n	8002df6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dd8:	2060      	movs	r0, #96	; 0x60
 8002dda:	f001 fc2d 	bl	8004638 <pvPortMalloc>
 8002dde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
 8002dec:	e005      	b.n	8002dfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f001 fcee 	bl	80047d0 <vPortFree>
 8002df4:	e001      	b.n	8002dfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d017      	beq.n	8002e30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e08:	88fa      	ldrh	r2, [r7, #6]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9303      	str	r3, [sp, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f80e 	bl	8002e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e24:	69f8      	ldr	r0, [r7, #28]
 8002e26:	f000 f89d 	bl	8002f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e002      	b.n	8002e36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
 8002e34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e36:	69bb      	ldr	r3, [r7, #24]
	}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	461a      	mov	r2, r3
 8002e58:	21a5      	movs	r1, #165	; 0xa5
 8002e5a:	f001 fedc 	bl	8004c16 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	f023 0307 	bic.w	r3, r3, #7
 8002e76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	617b      	str	r3, [r7, #20]
}
 8002e94:	bf00      	nop
 8002e96:	e7fe      	b.n	8002e96 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01f      	beq.n	8002ee4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	e012      	b.n	8002ed0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	7819      	ldrb	r1, [r3, #0]
 8002eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3334      	adds	r3, #52	; 0x34
 8002eba:	460a      	mov	r2, r1
 8002ebc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	d9e9      	bls.n	8002eaa <prvInitialiseNewTask+0x6a>
 8002ed6:	e000      	b.n	8002eda <prvInitialiseNewTask+0x9a>
			{
				break;
 8002ed8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ee2:	e003      	b.n	8002eec <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	2b37      	cmp	r3, #55	; 0x37
 8002ef0:	d901      	bls.n	8002ef6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ef2:	2337      	movs	r3, #55	; 0x37
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f00:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	2200      	movs	r2, #0
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f975 	bl	80021fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	3318      	adds	r3, #24
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f970 	bl	80021fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	2200      	movs	r2, #0
 8002f36:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	68f9      	ldr	r1, [r7, #12]
 8002f44:	69b8      	ldr	r0, [r7, #24]
 8002f46:	f001 f929 	bl	800419c <pxPortInitialiseStack>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f6c:	f001 fa42 	bl	80043f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f70:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <prvAddNewTaskToReadyList+0xc4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <prvAddNewTaskToReadyList+0xc4>)
 8002f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	; (800302c <prvAddNewTaskToReadyList+0xc8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f82:	4a2a      	ldr	r2, [pc, #168]	; (800302c <prvAddNewTaskToReadyList+0xc8>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f88:	4b27      	ldr	r3, [pc, #156]	; (8003028 <prvAddNewTaskToReadyList+0xc4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d110      	bne.n	8002fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f90:	f000 fc18 	bl	80037c4 <prvInitialiseTaskLists>
 8002f94:	e00d      	b.n	8002fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f96:	4b26      	ldr	r3, [pc, #152]	; (8003030 <prvAddNewTaskToReadyList+0xcc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f9e:	4b23      	ldr	r3, [pc, #140]	; (800302c <prvAddNewTaskToReadyList+0xc8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d802      	bhi.n	8002fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fac:	4a1f      	ldr	r2, [pc, #124]	; (800302c <prvAddNewTaskToReadyList+0xc8>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <prvAddNewTaskToReadyList+0xd0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <prvAddNewTaskToReadyList+0xd0>)
 8002fba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <prvAddNewTaskToReadyList+0xd0>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <prvAddNewTaskToReadyList+0xd4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d903      	bls.n	8002fd8 <prvAddNewTaskToReadyList+0x74>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <prvAddNewTaskToReadyList+0xd4>)
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <prvAddNewTaskToReadyList+0xd8>)
 8002fe6:	441a      	add	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f7ff f911 	bl	8002216 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ff4:	f001 fa2e 	bl	8004454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <prvAddNewTaskToReadyList+0xcc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00e      	beq.n	800301e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <prvAddNewTaskToReadyList+0xc8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	429a      	cmp	r2, r3
 800300c:	d207      	bcs.n	800301e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <prvAddNewTaskToReadyList+0xdc>)
 8003010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000ccc 	.word	0x20000ccc
 800302c:	200007f8 	.word	0x200007f8
 8003030:	20000cd8 	.word	0x20000cd8
 8003034:	20000ce8 	.word	0x20000ce8
 8003038:	20000cd4 	.word	0x20000cd4
 800303c:	200007fc 	.word	0x200007fc
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d017      	beq.n	8003086 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <vTaskDelay+0x60>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <vTaskDelay+0x30>
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	60bb      	str	r3, [r7, #8]
}
 8003070:	bf00      	nop
 8003072:	e7fe      	b.n	8003072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003074:	f000 f880 	bl	8003178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003078:	2100      	movs	r1, #0
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fcec 	bl	8003a58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003080:	f000 f888 	bl	8003194 <xTaskResumeAll>
 8003084:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <vTaskDelay+0x64>)
 800308e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000cf4 	.word	0x20000cf4
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ba:	463a      	mov	r2, r7
 80030bc:	1d39      	adds	r1, r7, #4
 80030be:	f107 0308 	add.w	r3, r7, #8
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f846 	bl	8002154 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	9202      	str	r2, [sp, #8]
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2300      	movs	r3, #0
 80030d8:	460a      	mov	r2, r1
 80030da:	4921      	ldr	r1, [pc, #132]	; (8003160 <vTaskStartScheduler+0xb4>)
 80030dc:	4821      	ldr	r0, [pc, #132]	; (8003164 <vTaskStartScheduler+0xb8>)
 80030de:	f7ff fe0d 	bl	8002cfc <xTaskCreateStatic>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4a20      	ldr	r2, [pc, #128]	; (8003168 <vTaskStartScheduler+0xbc>)
 80030e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030e8:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <vTaskStartScheduler+0xbc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030f0:	2301      	movs	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e001      	b.n	80030fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d102      	bne.n	8003106 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003100:	f000 fcfe 	bl	8003b00 <xTimerCreateTimerTask>
 8003104:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d116      	bne.n	800313a <vTaskStartScheduler+0x8e>
	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	613b      	str	r3, [r7, #16]
}
 800311e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <vTaskStartScheduler+0xc0>)
 8003122:	f04f 32ff 	mov.w	r2, #4294967295
 8003126:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <vTaskStartScheduler+0xc4>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <vTaskStartScheduler+0xc8>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003134:	f001 f8bc 	bl	80042b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003138:	e00e      	b.n	8003158 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d10a      	bne.n	8003158 <vTaskStartScheduler+0xac>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	60fb      	str	r3, [r7, #12]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <vTaskStartScheduler+0xaa>
}
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	080059c0 	.word	0x080059c0
 8003164:	08003791 	.word	0x08003791
 8003168:	20000cf0 	.word	0x20000cf0
 800316c:	20000cec 	.word	0x20000cec
 8003170:	20000cd8 	.word	0x20000cd8
 8003174:	20000cd0 	.word	0x20000cd0

08003178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <vTaskSuspendAll+0x18>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	4a03      	ldr	r2, [pc, #12]	; (8003190 <vTaskSuspendAll+0x18>)
 8003184:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	20000cf4 	.word	0x20000cf4

08003194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031a2:	4b42      	ldr	r3, [pc, #264]	; (80032ac <xTaskResumeAll+0x118>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	603b      	str	r3, [r7, #0]
}
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031c0:	f001 f918 	bl	80043f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031c4:	4b39      	ldr	r3, [pc, #228]	; (80032ac <xTaskResumeAll+0x118>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	4a38      	ldr	r2, [pc, #224]	; (80032ac <xTaskResumeAll+0x118>)
 80031cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <xTaskResumeAll+0x118>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d162      	bne.n	800329c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031d6:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <xTaskResumeAll+0x11c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d05e      	beq.n	800329c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031de:	e02f      	b.n	8003240 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e0:	4b34      	ldr	r3, [pc, #208]	; (80032b4 <xTaskResumeAll+0x120>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3318      	adds	r3, #24
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f86f 	bl	80022d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3304      	adds	r3, #4
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f86a 	bl	80022d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <xTaskResumeAll+0x124>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d903      	bls.n	8003210 <xTaskResumeAll+0x7c>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <xTaskResumeAll+0x124>)
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4a27      	ldr	r2, [pc, #156]	; (80032bc <xTaskResumeAll+0x128>)
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f7fe fff5 	bl	8002216 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <xTaskResumeAll+0x12c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800323a:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <xTaskResumeAll+0x130>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <xTaskResumeAll+0x120>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1cb      	bne.n	80031e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800324e:	f000 fb57 	bl	8003900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003252:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <xTaskResumeAll+0x134>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800325e:	f000 f847 	bl	80032f0 <xTaskIncrementTick>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <xTaskResumeAll+0x130>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3b01      	subs	r3, #1
 8003272:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f1      	bne.n	800325e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <xTaskResumeAll+0x134>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <xTaskResumeAll+0x130>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003288:	2301      	movs	r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <xTaskResumeAll+0x138>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800329c:	f001 f8da 	bl	8004454 <vPortExitCritical>

	return xAlreadyYielded;
 80032a0:	68bb      	ldr	r3, [r7, #8]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000cf4 	.word	0x20000cf4
 80032b0:	20000ccc 	.word	0x20000ccc
 80032b4:	20000c8c 	.word	0x20000c8c
 80032b8:	20000cd4 	.word	0x20000cd4
 80032bc:	200007fc 	.word	0x200007fc
 80032c0:	200007f8 	.word	0x200007f8
 80032c4:	20000ce0 	.word	0x20000ce0
 80032c8:	20000cdc 	.word	0x20000cdc
 80032cc:	e000ed04 	.word	0xe000ed04

080032d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <xTaskGetTickCount+0x1c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032dc:	687b      	ldr	r3, [r7, #4]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000cd0 	.word	0x20000cd0

080032f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032fa:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <xTaskIncrementTick+0x148>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f040 808f 	bne.w	8003422 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003304:	4b4d      	ldr	r3, [pc, #308]	; (800343c <xTaskIncrementTick+0x14c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800330c:	4a4b      	ldr	r2, [pc, #300]	; (800343c <xTaskIncrementTick+0x14c>)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d120      	bne.n	800335a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003318:	4b49      	ldr	r3, [pc, #292]	; (8003440 <xTaskIncrementTick+0x150>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <xTaskIncrementTick+0x48>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	603b      	str	r3, [r7, #0]
}
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <xTaskIncrementTick+0x46>
 8003338:	4b41      	ldr	r3, [pc, #260]	; (8003440 <xTaskIncrementTick+0x150>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <xTaskIncrementTick+0x154>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a3f      	ldr	r2, [pc, #252]	; (8003440 <xTaskIncrementTick+0x150>)
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4a3f      	ldr	r2, [pc, #252]	; (8003444 <xTaskIncrementTick+0x154>)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <xTaskIncrementTick+0x158>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	4a3d      	ldr	r2, [pc, #244]	; (8003448 <xTaskIncrementTick+0x158>)
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	f000 fad3 	bl	8003900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800335a:	4b3c      	ldr	r3, [pc, #240]	; (800344c <xTaskIncrementTick+0x15c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	429a      	cmp	r2, r3
 8003362:	d349      	bcc.n	80033f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003364:	4b36      	ldr	r3, [pc, #216]	; (8003440 <xTaskIncrementTick+0x150>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <xTaskIncrementTick+0x15c>)
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	601a      	str	r2, [r3, #0]
					break;
 8003376:	e03f      	b.n	80033f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <xTaskIncrementTick+0x150>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d203      	bcs.n	8003398 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003390:	4a2e      	ldr	r2, [pc, #184]	; (800344c <xTaskIncrementTick+0x15c>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003396:	e02f      	b.n	80033f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3304      	adds	r3, #4
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe ff97 	bl	80022d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3318      	adds	r3, #24
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe ff8e 	bl	80022d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <xTaskIncrementTick+0x160>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d903      	bls.n	80033c8 <xTaskIncrementTick+0xd8>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	4a22      	ldr	r2, [pc, #136]	; (8003450 <xTaskIncrementTick+0x160>)
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <xTaskIncrementTick+0x164>)
 80033d6:	441a      	add	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f7fe ff19 	bl	8002216 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <xTaskIncrementTick+0x168>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d3b8      	bcc.n	8003364 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033f6:	e7b5      	b.n	8003364 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <xTaskIncrementTick+0x168>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fe:	4915      	ldr	r1, [pc, #84]	; (8003454 <xTaskIncrementTick+0x164>)
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d901      	bls.n	8003414 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <xTaskIncrementTick+0x16c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	e004      	b.n	800342c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <xTaskIncrementTick+0x170>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <xTaskIncrementTick+0x170>)
 800342a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800342c:	697b      	ldr	r3, [r7, #20]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000cf4 	.word	0x20000cf4
 800343c:	20000cd0 	.word	0x20000cd0
 8003440:	20000c84 	.word	0x20000c84
 8003444:	20000c88 	.word	0x20000c88
 8003448:	20000ce4 	.word	0x20000ce4
 800344c:	20000cec 	.word	0x20000cec
 8003450:	20000cd4 	.word	0x20000cd4
 8003454:	200007fc 	.word	0x200007fc
 8003458:	200007f8 	.word	0x200007f8
 800345c:	20000ce0 	.word	0x20000ce0
 8003460:	20000cdc 	.word	0x20000cdc

08003464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800346a:	4b28      	ldr	r3, [pc, #160]	; (800350c <vTaskSwitchContext+0xa8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003472:	4b27      	ldr	r3, [pc, #156]	; (8003510 <vTaskSwitchContext+0xac>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003478:	e041      	b.n	80034fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800347a:	4b25      	ldr	r3, [pc, #148]	; (8003510 <vTaskSwitchContext+0xac>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003480:	4b24      	ldr	r3, [pc, #144]	; (8003514 <vTaskSwitchContext+0xb0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e010      	b.n	80034aa <vTaskSwitchContext+0x46>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	607b      	str	r3, [r7, #4]
}
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <vTaskSwitchContext+0x3e>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	491b      	ldr	r1, [pc, #108]	; (8003518 <vTaskSwitchContext+0xb4>)
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0e4      	beq.n	8003488 <vTaskSwitchContext+0x24>
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4a13      	ldr	r2, [pc, #76]	; (8003518 <vTaskSwitchContext+0xb4>)
 80034ca:	4413      	add	r3, r2
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	3308      	adds	r3, #8
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d104      	bne.n	80034ee <vTaskSwitchContext+0x8a>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a09      	ldr	r2, [pc, #36]	; (800351c <vTaskSwitchContext+0xb8>)
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4a06      	ldr	r2, [pc, #24]	; (8003514 <vTaskSwitchContext+0xb0>)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6013      	str	r3, [r2, #0]
}
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000cf4 	.word	0x20000cf4
 8003510:	20000ce0 	.word	0x20000ce0
 8003514:	20000cd4 	.word	0x20000cd4
 8003518:	200007fc 	.word	0x200007fc
 800351c:	200007f8 	.word	0x200007f8

08003520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	60fb      	str	r3, [r7, #12]
}
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <vTaskPlaceOnEventList+0x44>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3318      	adds	r3, #24
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fe fe85 	bl	800225e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003554:	2101      	movs	r1, #1
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f000 fa7e 	bl	8003a58 <prvAddCurrentTaskToDelayedList>
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200007f8 	.word	0x200007f8

08003568 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	617b      	str	r3, [r7, #20]
}
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <vTaskPlaceOnEventListRestricted+0x54>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3318      	adds	r3, #24
 8003596:	4619      	mov	r1, r3
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7fe fe3c 	bl	8002216 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68b8      	ldr	r0, [r7, #8]
 80035ae:	f000 fa53 	bl	8003a58 <prvAddCurrentTaskToDelayedList>
	}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200007f8 	.word	0x200007f8

080035c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	60fb      	str	r3, [r7, #12]
}
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	3318      	adds	r3, #24
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe fe6d 	bl	80022d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <xTaskRemoveFromEventList+0xb0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11d      	bne.n	800363a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	3304      	adds	r3, #4
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fe64 	bl	80022d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <xTaskRemoveFromEventList+0xb4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d903      	bls.n	800361c <xTaskRemoveFromEventList+0x5c>
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	4a16      	ldr	r2, [pc, #88]	; (8003674 <xTaskRemoveFromEventList+0xb4>)
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4a13      	ldr	r2, [pc, #76]	; (8003678 <xTaskRemoveFromEventList+0xb8>)
 800362a:	441a      	add	r2, r3
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f7fe fdef 	bl	8002216 <vListInsertEnd>
 8003638:	e005      	b.n	8003646 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	3318      	adds	r3, #24
 800363e:	4619      	mov	r1, r3
 8003640:	480e      	ldr	r0, [pc, #56]	; (800367c <xTaskRemoveFromEventList+0xbc>)
 8003642:	f7fe fde8 	bl	8002216 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <xTaskRemoveFromEventList+0xc0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	429a      	cmp	r2, r3
 8003652:	d905      	bls.n	8003660 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003654:	2301      	movs	r3, #1
 8003656:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <xTaskRemoveFromEventList+0xc4>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e001      	b.n	8003664 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003664:	697b      	ldr	r3, [r7, #20]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20000cf4 	.word	0x20000cf4
 8003674:	20000cd4 	.word	0x20000cd4
 8003678:	200007fc 	.word	0x200007fc
 800367c:	20000c8c 	.word	0x20000c8c
 8003680:	200007f8 	.word	0x200007f8
 8003684:	20000ce0 	.word	0x20000ce0

08003688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <vTaskInternalSetTimeOutState+0x24>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <vTaskInternalSetTimeOutState+0x28>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	20000ce4 	.word	0x20000ce4
 80036b0:	20000cd0 	.word	0x20000cd0

080036b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	613b      	str	r3, [r7, #16]
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	60fb      	str	r3, [r7, #12]
}
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80036f6:	f000 fe7d 	bl	80043f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <xTaskCheckForTimeOut+0xbc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003712:	d102      	bne.n	800371a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	e023      	b.n	8003762 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <xTaskCheckForTimeOut+0xc0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d007      	beq.n	8003736 <xTaskCheckForTimeOut+0x82>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003730:	2301      	movs	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	e015      	b.n	8003762 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	d20b      	bcs.n	8003758 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	1ad2      	subs	r2, r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff9b 	bl	8003688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e004      	b.n	8003762 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003762:	f000 fe77 	bl	8004454 <vPortExitCritical>

	return xReturn;
 8003766:	69fb      	ldr	r3, [r7, #28]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000cd0 	.word	0x20000cd0
 8003774:	20000ce4 	.word	0x20000ce4

08003778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <vTaskMissedYield+0x14>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000ce0 	.word	0x20000ce0

08003790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003798:	f000 f854 	bl	8003844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <prvIdleTask+0x2c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d907      	bls.n	80037b4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <prvIdleTask+0x30>)
 80037a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80037b4:	f7fc feda 	bl	800056c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80037b8:	e7ee      	b.n	8003798 <prvIdleTask+0x8>
 80037ba:	bf00      	nop
 80037bc:	200007fc 	.word	0x200007fc
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	e00c      	b.n	80037ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <prvInitialiseTaskLists+0x60>)
 80037dc:	4413      	add	r3, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fcec 	bl	80021bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3301      	adds	r3, #1
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b37      	cmp	r3, #55	; 0x37
 80037ee:	d9ef      	bls.n	80037d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037f0:	480d      	ldr	r0, [pc, #52]	; (8003828 <prvInitialiseTaskLists+0x64>)
 80037f2:	f7fe fce3 	bl	80021bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037f6:	480d      	ldr	r0, [pc, #52]	; (800382c <prvInitialiseTaskLists+0x68>)
 80037f8:	f7fe fce0 	bl	80021bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <prvInitialiseTaskLists+0x6c>)
 80037fe:	f7fe fcdd 	bl	80021bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003802:	480c      	ldr	r0, [pc, #48]	; (8003834 <prvInitialiseTaskLists+0x70>)
 8003804:	f7fe fcda 	bl	80021bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <prvInitialiseTaskLists+0x74>)
 800380a:	f7fe fcd7 	bl	80021bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <prvInitialiseTaskLists+0x78>)
 8003810:	4a05      	ldr	r2, [pc, #20]	; (8003828 <prvInitialiseTaskLists+0x64>)
 8003812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <prvInitialiseTaskLists+0x7c>)
 8003816:	4a05      	ldr	r2, [pc, #20]	; (800382c <prvInitialiseTaskLists+0x68>)
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200007fc 	.word	0x200007fc
 8003828:	20000c5c 	.word	0x20000c5c
 800382c:	20000c70 	.word	0x20000c70
 8003830:	20000c8c 	.word	0x20000c8c
 8003834:	20000ca0 	.word	0x20000ca0
 8003838:	20000cb8 	.word	0x20000cb8
 800383c:	20000c84 	.word	0x20000c84
 8003840:	20000c88 	.word	0x20000c88

08003844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800384a:	e019      	b.n	8003880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800384c:	f000 fdd2 	bl	80043f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <prvCheckTasksWaitingTermination+0x50>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fd37 	bl	80022d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <prvCheckTasksWaitingTermination+0x54>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <prvCheckTasksWaitingTermination+0x54>)
 800386a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <prvCheckTasksWaitingTermination+0x58>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	4a0a      	ldr	r2, [pc, #40]	; (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003876:	f000 fded 	bl	8004454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f810 	bl	80038a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e1      	bne.n	800384c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000ca0 	.word	0x20000ca0
 8003898:	20000ccc 	.word	0x20000ccc
 800389c:	20000cb4 	.word	0x20000cb4

080038a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d108      	bne.n	80038c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 ff8a 	bl	80047d0 <vPortFree>
				vPortFree( pxTCB );
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 ff87 	bl	80047d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038c2:	e018      	b.n	80038f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d103      	bne.n	80038d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 ff7e 	bl	80047d0 <vPortFree>
	}
 80038d4:	e00f      	b.n	80038f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d00a      	beq.n	80038f6 <prvDeleteTCB+0x56>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	60fb      	str	r3, [r7, #12]
}
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <prvDeleteTCB+0x54>
	}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <prvResetNextTaskUnblockTime+0x38>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <prvResetNextTaskUnblockTime+0x3c>)
 8003912:	f04f 32ff 	mov.w	r2, #4294967295
 8003916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003918:	e008      	b.n	800392c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <prvResetNextTaskUnblockTime+0x38>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <prvResetNextTaskUnblockTime+0x3c>)
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	20000c84 	.word	0x20000c84
 800393c:	20000cec 	.word	0x20000cec

08003940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <xTaskGetSchedulerState+0x34>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800394e:	2301      	movs	r3, #1
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	e008      	b.n	8003966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <xTaskGetSchedulerState+0x38>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800395c:	2302      	movs	r3, #2
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	e001      	b.n	8003966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003966:	687b      	ldr	r3, [r7, #4]
	}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	20000cd8 	.word	0x20000cd8
 8003978:	20000cf4 	.word	0x20000cf4

0800397c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d056      	beq.n	8003a40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003992:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <xTaskPriorityDisinherit+0xd0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	429a      	cmp	r2, r3
 800399a:	d00a      	beq.n	80039b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	60fb      	str	r3, [r7, #12]
}
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	60bb      	str	r3, [r7, #8]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d02c      	beq.n	8003a40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d128      	bne.n	8003a40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fc6c 	bl	80022d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <xTaskPriorityDisinherit+0xd4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d903      	bls.n	8003a20 <xTaskPriorityDisinherit+0xa4>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <xTaskPriorityDisinherit+0xd4>)
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4a09      	ldr	r2, [pc, #36]	; (8003a54 <xTaskPriorityDisinherit+0xd8>)
 8003a2e:	441a      	add	r2, r3
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f7fe fbed 	bl	8002216 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a40:	697b      	ldr	r3, [r7, #20]
	}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200007f8 	.word	0x200007f8
 8003a50:	20000cd4 	.word	0x20000cd4
 8003a54:	200007fc 	.word	0x200007fc

08003a58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a62:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a68:	4b20      	ldr	r3, [pc, #128]	; (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fc2e 	bl	80022d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d10a      	bne.n	8003a92 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4819      	ldr	r0, [pc, #100]	; (8003af0 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a8c:	f7fe fbc3 	bl	8002216 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a90:	e026      	b.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d209      	bcs.n	8003abe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	f7fe fbd1 	bl	800225e <vListInsert>
}
 8003abc:	e010      	b.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003abe:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f7fe fbc7 	bl	800225e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d202      	bcs.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <prvAddCurrentTaskToDelayedList+0xa4>)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000cd0 	.word	0x20000cd0
 8003aec:	200007f8 	.word	0x200007f8
 8003af0:	20000cb8 	.word	0x20000cb8
 8003af4:	20000c88 	.word	0x20000c88
 8003af8:	20000c84 	.word	0x20000c84
 8003afc:	20000cec 	.word	0x20000cec

08003b00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b0a:	f000 fb07 	bl	800411c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <xTimerCreateTimerTask+0x80>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d021      	beq.n	8003b5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b1e:	1d3a      	adds	r2, r7, #4
 8003b20:	f107 0108 	add.w	r1, r7, #8
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fb2d 	bl	8002188 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	9202      	str	r2, [sp, #8]
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	2302      	movs	r3, #2
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	460a      	mov	r2, r1
 8003b40:	4910      	ldr	r1, [pc, #64]	; (8003b84 <xTimerCreateTimerTask+0x84>)
 8003b42:	4811      	ldr	r0, [pc, #68]	; (8003b88 <xTimerCreateTimerTask+0x88>)
 8003b44:	f7ff f8da 	bl	8002cfc <xTaskCreateStatic>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4a10      	ldr	r2, [pc, #64]	; (8003b8c <xTimerCreateTimerTask+0x8c>)
 8003b4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <xTimerCreateTimerTask+0x8c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b56:	2301      	movs	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	613b      	str	r3, [r7, #16]
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b76:	697b      	ldr	r3, [r7, #20]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000d28 	.word	0x20000d28
 8003b84:	080059c8 	.word	0x080059c8
 8003b88:	08003cc5 	.word	0x08003cc5
 8003b8c:	20000d2c 	.word	0x20000d2c

08003b90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	623b      	str	r3, [r7, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <xTimerGenericCommand+0x98>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d02a      	beq.n	8003c1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	dc18      	bgt.n	8003c0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bd8:	f7ff feb2 	bl	8003940 <xTaskGetSchedulerState>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d109      	bne.n	8003bf6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <xTimerGenericCommand+0x98>)
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	f107 0110 	add.w	r1, r7, #16
 8003bea:	2300      	movs	r3, #0
 8003bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bee:	f7fe fc9d 	bl	800252c <xQueueGenericSend>
 8003bf2:	6278      	str	r0, [r7, #36]	; 0x24
 8003bf4:	e012      	b.n	8003c1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <xTimerGenericCommand+0x98>)
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	f107 0110 	add.w	r1, r7, #16
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2200      	movs	r2, #0
 8003c02:	f7fe fc93 	bl	800252c <xQueueGenericSend>
 8003c06:	6278      	str	r0, [r7, #36]	; 0x24
 8003c08:	e008      	b.n	8003c1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <xTimerGenericCommand+0x98>)
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	f107 0110 	add.w	r1, r7, #16
 8003c12:	2300      	movs	r3, #0
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	f7fe fd87 	bl	8002728 <xQueueGenericSendFromISR>
 8003c1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3728      	adds	r7, #40	; 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000d28 	.word	0x20000d28

08003c2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c36:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <prvProcessExpiredTimer+0x94>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe fb43 	bl	80022d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d022      	beq.n	8003c9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	18d1      	adds	r1, r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	6978      	ldr	r0, [r7, #20]
 8003c66:	f000 f8d1 	bl	8003e0c <prvInsertTimerInActiveList>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01f      	beq.n	8003cb0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c70:	2300      	movs	r3, #0
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2300      	movs	r3, #0
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	2100      	movs	r1, #0
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7ff ff88 	bl	8003b90 <xTimerGenericCommand>
 8003c80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d113      	bne.n	8003cb0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	60fb      	str	r3, [r7, #12]
}
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	6978      	ldr	r0, [r7, #20]
 8003cb6:	4798      	blx	r3
}
 8003cb8:	bf00      	nop
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000d20 	.word	0x20000d20

08003cc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ccc:	f107 0308 	add.w	r3, r7, #8
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f857 	bl	8003d84 <prvGetNextExpireTime>
 8003cd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f803 	bl	8003ce8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ce2:	f000 f8d5 	bl	8003e90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ce6:	e7f1      	b.n	8003ccc <prvTimerTask+0x8>

08003ce8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003cf2:	f7ff fa41 	bl	8003178 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cf6:	f107 0308 	add.w	r3, r7, #8
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f866 	bl	8003dcc <prvSampleTimeNow>
 8003d00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d130      	bne.n	8003d6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <prvProcessTimerOrBlockTask+0x3c>
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d806      	bhi.n	8003d24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d16:	f7ff fa3d 	bl	8003194 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff85 	bl	8003c2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d22:	e024      	b.n	8003d6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <prvProcessTimerOrBlockTask+0x90>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <prvProcessTimerOrBlockTask+0x50>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <prvProcessTimerOrBlockTask+0x52>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <prvProcessTimerOrBlockTask+0x94>)
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	f7fe ffa3 	bl	8002c94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d4e:	f7ff fa21 	bl	8003194 <xTaskResumeAll>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <prvProcessTimerOrBlockTask+0x98>)
 8003d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	f3bf 8f6f 	isb	sy
}
 8003d68:	e001      	b.n	8003d6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d6a:	f7ff fa13 	bl	8003194 <xTaskResumeAll>
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20000d24 	.word	0x20000d24
 8003d7c:	20000d28 	.word	0x20000d28
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d8c:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <prvGetNextExpireTime+0x44>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <prvGetNextExpireTime+0x16>
 8003d96:	2201      	movs	r2, #1
 8003d98:	e000      	b.n	8003d9c <prvGetNextExpireTime+0x18>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <prvGetNextExpireTime+0x44>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e001      	b.n	8003db8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003db8:	68fb      	ldr	r3, [r7, #12]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000d20 	.word	0x20000d20

08003dcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003dd4:	f7ff fa7c 	bl	80032d0 <xTaskGetTickCount>
 8003dd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <prvSampleTimeNow+0x3c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d205      	bcs.n	8003df0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003de4:	f000 f936 	bl	8004054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e002      	b.n	8003df6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003df6:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <prvSampleTimeNow+0x3c>)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000d30 	.word	0x20000d30

08003e0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d812      	bhi.n	8003e58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e01b      	b.n	8003e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <prvInsertTimerInActiveList+0x7c>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f7fe fa04 	bl	800225e <vListInsert>
 8003e56:	e012      	b.n	8003e7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d206      	bcs.n	8003e6e <prvInsertTimerInActiveList+0x62>
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d302      	bcc.n	8003e6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e007      	b.n	8003e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <prvInsertTimerInActiveList+0x80>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7fe f9f0 	bl	800225e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e7e:	697b      	ldr	r3, [r7, #20]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000d24 	.word	0x20000d24
 8003e8c:	20000d20 	.word	0x20000d20

08003e90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08e      	sub	sp, #56	; 0x38
 8003e94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e96:	e0ca      	b.n	800402e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	da18      	bge.n	8003ed0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	61fb      	str	r3, [r7, #28]
}
 8003ebc:	bf00      	nop
 8003ebe:	e7fe      	b.n	8003ebe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec6:	6850      	ldr	r0, [r2, #4]
 8003ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eca:	6892      	ldr	r2, [r2, #8]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f2c0 80ab 	blt.w	800402e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe f9f1 	bl	80022d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eee:	463b      	mov	r3, r7
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff6b 	bl	8003dcc <prvSampleTimeNow>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b09      	cmp	r3, #9
 8003efc:	f200 8096 	bhi.w	800402c <prvProcessReceivedCommands+0x19c>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <prvProcessReceivedCommands+0x78>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f31 	.word	0x08003f31
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f31 	.word	0x08003f31
 8003f14:	08003fa5 	.word	0x08003fa5
 8003f18:	08003fb9 	.word	0x08003fb9
 8003f1c:	08004003 	.word	0x08004003
 8003f20:	08003f31 	.word	0x08003f31
 8003f24:	08003f31 	.word	0x08003f31
 8003f28:	08003fa5 	.word	0x08003fa5
 8003f2c:	08003fb9 	.word	0x08003fb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	18d1      	adds	r1, r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f50:	f7ff ff5c 	bl	8003e0c <prvInsertTimerInActiveList>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d069      	beq.n	800402e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d05e      	beq.n	800402e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	441a      	add	r2, r3
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2100      	movs	r1, #0
 8003f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f82:	f7ff fe05 	bl	8003b90 <xTimerGenericCommand>
 8003f86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d14f      	bne.n	800402e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	61bb      	str	r3, [r7, #24]
}
 8003fa0:	bf00      	nop
 8003fa2:	e7fe      	b.n	8003fa2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003fb6:	e03a      	b.n	800402e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	617b      	str	r3, [r7, #20]
}
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	18d1      	adds	r1, r2, r3
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ffc:	f7ff ff06 	bl	8003e0c <prvInsertTimerInActiveList>
					break;
 8004000:	e015      	b.n	800402e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004012:	f000 fbdd 	bl	80047d0 <vPortFree>
 8004016:	e00a      	b.n	800402e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	b2da      	uxtb	r2, r3
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800402a:	e000      	b.n	800402e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800402c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <prvProcessReceivedCommands+0x1c0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1d39      	adds	r1, r7, #4
 8004034:	2200      	movs	r2, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fc12 	bl	8002860 <xQueueReceive>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	f47f af2a 	bne.w	8003e98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	3730      	adds	r7, #48	; 0x30
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000d28 	.word	0x20000d28

08004054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800405a:	e048      	b.n	80040ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800405c:	4b2d      	ldr	r3, [pc, #180]	; (8004114 <prvSwitchTimerLists+0xc0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004066:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <prvSwitchTimerLists+0xc0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe f92b 	bl	80022d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d02e      	beq.n	80040ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90e      	bls.n	80040c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040ae:	4b19      	ldr	r3, [pc, #100]	; (8004114 <prvSwitchTimerLists+0xc0>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3304      	adds	r3, #4
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f7fe f8d0 	bl	800225e <vListInsert>
 80040be:	e016      	b.n	80040ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040c0:	2300      	movs	r3, #0
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2300      	movs	r3, #0
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	2100      	movs	r1, #0
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff fd60 	bl	8003b90 <xTimerGenericCommand>
 80040d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	603b      	str	r3, [r7, #0]
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ee:	4b09      	ldr	r3, [pc, #36]	; (8004114 <prvSwitchTimerLists+0xc0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1b1      	bne.n	800405c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <prvSwitchTimerLists+0xc0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <prvSwitchTimerLists+0xc4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <prvSwitchTimerLists+0xc0>)
 8004104:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <prvSwitchTimerLists+0xc4>)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	bf00      	nop
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000d20 	.word	0x20000d20
 8004118:	20000d24 	.word	0x20000d24

0800411c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004122:	f000 f967 	bl	80043f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <prvCheckForValidListAndQueue+0x60>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d120      	bne.n	8004170 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800412e:	4814      	ldr	r0, [pc, #80]	; (8004180 <prvCheckForValidListAndQueue+0x64>)
 8004130:	f7fe f844 	bl	80021bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004134:	4813      	ldr	r0, [pc, #76]	; (8004184 <prvCheckForValidListAndQueue+0x68>)
 8004136:	f7fe f841 	bl	80021bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <prvCheckForValidListAndQueue+0x6c>)
 800413c:	4a10      	ldr	r2, [pc, #64]	; (8004180 <prvCheckForValidListAndQueue+0x64>)
 800413e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <prvCheckForValidListAndQueue+0x70>)
 8004142:	4a10      	ldr	r2, [pc, #64]	; (8004184 <prvCheckForValidListAndQueue+0x68>)
 8004144:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004146:	2300      	movs	r3, #0
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <prvCheckForValidListAndQueue+0x74>)
 800414c:	4a11      	ldr	r2, [pc, #68]	; (8004194 <prvCheckForValidListAndQueue+0x78>)
 800414e:	2110      	movs	r1, #16
 8004150:	200a      	movs	r0, #10
 8004152:	f7fe f94f 	bl	80023f4 <xQueueGenericCreateStatic>
 8004156:	4603      	mov	r3, r0
 8004158:	4a08      	ldr	r2, [pc, #32]	; (800417c <prvCheckForValidListAndQueue+0x60>)
 800415a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <prvCheckForValidListAndQueue+0x60>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <prvCheckForValidListAndQueue+0x60>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	490b      	ldr	r1, [pc, #44]	; (8004198 <prvCheckForValidListAndQueue+0x7c>)
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fd68 	bl	8002c40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004170:	f000 f970 	bl	8004454 <vPortExitCritical>
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000d28 	.word	0x20000d28
 8004180:	20000cf8 	.word	0x20000cf8
 8004184:	20000d0c 	.word	0x20000d0c
 8004188:	20000d20 	.word	0x20000d20
 800418c:	20000d24 	.word	0x20000d24
 8004190:	20000dd4 	.word	0x20000dd4
 8004194:	20000d34 	.word	0x20000d34
 8004198:	080059d0 	.word	0x080059d0

0800419c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3b04      	subs	r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3b04      	subs	r3, #4
 80041ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0201 	bic.w	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3b04      	subs	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041cc:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <pxPortInitialiseStack+0x64>)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3b14      	subs	r3, #20
 80041d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b04      	subs	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f06f 0202 	mvn.w	r2, #2
 80041ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	3b20      	subs	r3, #32
 80041f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	08004205 	.word	0x08004205

08004204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <prvTaskExitError+0x54>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d00a      	beq.n	800422e <prvTaskExitError+0x2a>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	60fb      	str	r3, [r7, #12]
}
 800422a:	bf00      	nop
 800422c:	e7fe      	b.n	800422c <prvTaskExitError+0x28>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	60bb      	str	r3, [r7, #8]
}
 8004240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004242:	bf00      	nop
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0fc      	beq.n	8004244 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000018 	.word	0x20000018
 800425c:	00000000 	.word	0x00000000

08004260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <pxCurrentTCBConst2>)
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	6808      	ldr	r0, [r1, #0]
 8004266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426a:	f380 8809 	msr	PSP, r0
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8811 	msr	BASEPRI, r0
 800427a:	4770      	bx	lr
 800427c:	f3af 8000 	nop.w

08004280 <pxCurrentTCBConst2>:
 8004280:	200007f8 	.word	0x200007f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop

08004288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004288:	4808      	ldr	r0, [pc, #32]	; (80042ac <prvPortStartFirstTask+0x24>)
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	6800      	ldr	r0, [r0, #0]
 800428e:	f380 8808 	msr	MSP, r0
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8814 	msr	CONTROL, r0
 800429a:	b662      	cpsie	i
 800429c:	b661      	cpsie	f
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	df00      	svc	0
 80042a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042aa:	bf00      	nop
 80042ac:	e000ed08 	.word	0xe000ed08

080042b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042b6:	4b46      	ldr	r3, [pc, #280]	; (80043d0 <xPortStartScheduler+0x120>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a46      	ldr	r2, [pc, #280]	; (80043d4 <xPortStartScheduler+0x124>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10a      	bne.n	80042d6 <xPortStartScheduler+0x26>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	613b      	str	r3, [r7, #16]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042d6:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <xPortStartScheduler+0x120>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3f      	ldr	r2, [pc, #252]	; (80043d8 <xPortStartScheduler+0x128>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10a      	bne.n	80042f6 <xPortStartScheduler+0x46>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	60fb      	str	r3, [r7, #12]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <xPortStartScheduler+0x12c>)
 80042f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <xPortStartScheduler+0x130>)
 800431c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800431e:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <xPortStartScheduler+0x134>)
 8004320:	2207      	movs	r2, #7
 8004322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004324:	e009      	b.n	800433a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004326:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <xPortStartScheduler+0x134>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3b01      	subs	r3, #1
 800432c:	4a2d      	ldr	r2, [pc, #180]	; (80043e4 <xPortStartScheduler+0x134>)
 800432e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	b2db      	uxtb	r3, r3
 8004338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b80      	cmp	r3, #128	; 0x80
 8004344:	d0ef      	beq.n	8004326 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004346:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <xPortStartScheduler+0x134>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1c3 0307 	rsb	r3, r3, #7
 800434e:	2b04      	cmp	r3, #4
 8004350:	d00a      	beq.n	8004368 <xPortStartScheduler+0xb8>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	60bb      	str	r3, [r7, #8]
}
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004368:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <xPortStartScheduler+0x134>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <xPortStartScheduler+0x134>)
 8004370:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004372:	4b1c      	ldr	r3, [pc, #112]	; (80043e4 <xPortStartScheduler+0x134>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800437a:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <xPortStartScheduler+0x134>)
 800437c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <xPortStartScheduler+0x138>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <xPortStartScheduler+0x138>)
 800438c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <xPortStartScheduler+0x138>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <xPortStartScheduler+0x138>)
 8004398:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800439c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800439e:	f000 f8dd 	bl	800455c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <xPortStartScheduler+0x13c>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043a8:	f000 f8fc 	bl	80045a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <xPortStartScheduler+0x140>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0f      	ldr	r2, [pc, #60]	; (80043f0 <xPortStartScheduler+0x140>)
 80043b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043b8:	f7ff ff66 	bl	8004288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043bc:	f7ff f852 	bl	8003464 <vTaskSwitchContext>
	prvTaskExitError();
 80043c0:	f7ff ff20 	bl	8004204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	e000ed00 	.word	0xe000ed00
 80043d4:	410fc271 	.word	0x410fc271
 80043d8:	410fc270 	.word	0x410fc270
 80043dc:	e000e400 	.word	0xe000e400
 80043e0:	20000e24 	.word	0x20000e24
 80043e4:	20000e28 	.word	0x20000e28
 80043e8:	e000ed20 	.word	0xe000ed20
 80043ec:	20000018 	.word	0x20000018
 80043f0:	e000ef34 	.word	0xe000ef34

080043f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	607b      	str	r3, [r7, #4]
}
 800440c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <vPortEnterCritical+0x58>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	4a0d      	ldr	r2, [pc, #52]	; (800444c <vPortEnterCritical+0x58>)
 8004416:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <vPortEnterCritical+0x58>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10f      	bne.n	8004440 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <vPortEnterCritical+0x5c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <vPortEnterCritical+0x4c>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	603b      	str	r3, [r7, #0]
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <vPortEnterCritical+0x4a>
	}
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20000018 	.word	0x20000018
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <vPortExitCritical+0x50>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <vPortExitCritical+0x24>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	607b      	str	r3, [r7, #4]
}
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <vPortExitCritical+0x50>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3b01      	subs	r3, #1
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <vPortExitCritical+0x50>)
 8004480:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <vPortExitCritical+0x50>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <vPortExitCritical+0x42>
 800448a:	2300      	movs	r3, #0
 800448c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f383 8811 	msr	BASEPRI, r3
}
 8004494:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000018 	.word	0x20000018
	...

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f01e 0f10 	tst.w	lr, #16
 80044c0:	bf08      	it	eq
 80044c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	6010      	str	r0, [r2, #0]
 80044cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044d4:	f380 8811 	msr	BASEPRI, r0
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f7fe ffc0 	bl	8003464 <vTaskSwitchContext>
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f380 8811 	msr	BASEPRI, r0
 80044ec:	bc09      	pop	{r0, r3}
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	6808      	ldr	r0, [r1, #0]
 80044f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f6:	f01e 0f10 	tst.w	lr, #16
 80044fa:	bf08      	it	eq
 80044fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004500:	f380 8809 	msr	PSP, r0
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst>:
 8004510:	200007f8 	.word	0x200007f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
}
 8004530:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004532:	f7fe fedd 	bl	80032f0 <xTaskIncrementTick>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <xPortSysTickHandler+0x40>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	2300      	movs	r3, #0
 8004546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f383 8811 	msr	BASEPRI, r3
}
 800454e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <vPortSetupTimerInterrupt+0x34>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <vPortSetupTimerInterrupt+0x38>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <vPortSetupTimerInterrupt+0x3c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0a      	ldr	r2, [pc, #40]	; (800459c <vPortSetupTimerInterrupt+0x40>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <vPortSetupTimerInterrupt+0x44>)
 800457a:	3b01      	subs	r3, #1
 800457c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <vPortSetupTimerInterrupt+0x34>)
 8004580:	2207      	movs	r2, #7
 8004582:	601a      	str	r2, [r3, #0]
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e010 	.word	0xe000e010
 8004594:	e000e018 	.word	0xe000e018
 8004598:	2000000c 	.word	0x2000000c
 800459c:	10624dd3 	.word	0x10624dd3
 80045a0:	e000e014 	.word	0xe000e014

080045a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045b4 <vPortEnableVFP+0x10>
 80045a8:	6801      	ldr	r1, [r0, #0]
 80045aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045ae:	6001      	str	r1, [r0, #0]
 80045b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045b2:	bf00      	nop
 80045b4:	e000ed88 	.word	0xe000ed88

080045b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d914      	bls.n	80045f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ca:	4a17      	ldr	r2, [pc, #92]	; (8004628 <vPortValidateInterruptPriority+0x70>)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045d4:	4b15      	ldr	r3, [pc, #84]	; (800462c <vPortValidateInterruptPriority+0x74>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	7afa      	ldrb	r2, [r7, #11]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d20a      	bcs.n	80045f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
}
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <vPortValidateInterruptPriority+0x78>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <vPortValidateInterruptPriority+0x7c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d90a      	bls.n	800461a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	603b      	str	r3, [r7, #0]
}
 8004616:	bf00      	nop
 8004618:	e7fe      	b.n	8004618 <vPortValidateInterruptPriority+0x60>
	}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	e000e3f0 	.word	0xe000e3f0
 800462c:	20000e24 	.word	0x20000e24
 8004630:	e000ed0c 	.word	0xe000ed0c
 8004634:	20000e28 	.word	0x20000e28

08004638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004644:	f7fe fd98 	bl	8003178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004648:	4b5b      	ldr	r3, [pc, #364]	; (80047b8 <pvPortMalloc+0x180>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004650:	f000 f920 	bl	8004894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004654:	4b59      	ldr	r3, [pc, #356]	; (80047bc <pvPortMalloc+0x184>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8093 	bne.w	8004788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01d      	beq.n	80046a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004668:	2208      	movs	r2, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	2b00      	cmp	r3, #0
 8004678:	d014      	beq.n	80046a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f023 0307 	bic.w	r3, r3, #7
 8004680:	3308      	adds	r3, #8
 8004682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <pvPortMalloc+0x6c>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	617b      	str	r3, [r7, #20]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d06e      	beq.n	8004788 <pvPortMalloc+0x150>
 80046aa:	4b45      	ldr	r3, [pc, #276]	; (80047c0 <pvPortMalloc+0x188>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d869      	bhi.n	8004788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046b4:	4b43      	ldr	r3, [pc, #268]	; (80047c4 <pvPortMalloc+0x18c>)
 80046b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046b8:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <pvPortMalloc+0x18c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046be:	e004      	b.n	80046ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d903      	bls.n	80046dc <pvPortMalloc+0xa4>
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f1      	bne.n	80046c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046dc:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <pvPortMalloc+0x180>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d050      	beq.n	8004788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2208      	movs	r2, #8
 80046ec:	4413      	add	r3, r2
 80046ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1ad2      	subs	r2, r2, r3
 8004700:	2308      	movs	r3, #8
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	429a      	cmp	r2, r3
 8004706:	d91f      	bls.n	8004748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <pvPortMalloc+0xf8>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	613b      	str	r3, [r7, #16]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004742:	69b8      	ldr	r0, [r7, #24]
 8004744:	f000 f908 	bl	8004958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004748:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <pvPortMalloc+0x188>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <pvPortMalloc+0x188>)
 8004754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004756:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <pvPortMalloc+0x188>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <pvPortMalloc+0x190>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d203      	bcs.n	800476a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004762:	4b17      	ldr	r3, [pc, #92]	; (80047c0 <pvPortMalloc+0x188>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <pvPortMalloc+0x190>)
 8004768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <pvPortMalloc+0x184>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	431a      	orrs	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <pvPortMalloc+0x194>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3301      	adds	r3, #1
 8004784:	4a11      	ldr	r2, [pc, #68]	; (80047cc <pvPortMalloc+0x194>)
 8004786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004788:	f7fe fd04 	bl	8003194 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <pvPortMalloc+0x174>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60fb      	str	r3, [r7, #12]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <pvPortMalloc+0x172>
	return pvReturn;
 80047ac:	69fb      	ldr	r3, [r7, #28]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3728      	adds	r7, #40	; 0x28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20004a34 	.word	0x20004a34
 80047bc:	20004a48 	.word	0x20004a48
 80047c0:	20004a38 	.word	0x20004a38
 80047c4:	20004a2c 	.word	0x20004a2c
 80047c8:	20004a3c 	.word	0x20004a3c
 80047cc:	20004a40 	.word	0x20004a40

080047d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04d      	beq.n	800487e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047e2:	2308      	movs	r3, #8
 80047e4:	425b      	negs	r3, r3
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4413      	add	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	4b24      	ldr	r3, [pc, #144]	; (8004888 <vPortFree+0xb8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <vPortFree+0x44>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60fb      	str	r3, [r7, #12]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <vPortFree+0x62>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	60bb      	str	r3, [r7, #8]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <vPortFree+0xb8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01e      	beq.n	800487e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d11a      	bne.n	800487e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <vPortFree+0xb8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	43db      	mvns	r3, r3
 8004852:	401a      	ands	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004858:	f7fe fc8e 	bl	8003178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <vPortFree+0xbc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4413      	add	r3, r2
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <vPortFree+0xbc>)
 8004868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800486a:	6938      	ldr	r0, [r7, #16]
 800486c:	f000 f874 	bl	8004958 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <vPortFree+0xc0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	4a06      	ldr	r2, [pc, #24]	; (8004890 <vPortFree+0xc0>)
 8004878:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800487a:	f7fe fc8b 	bl	8003194 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20004a48 	.word	0x20004a48
 800488c:	20004a38 	.word	0x20004a38
 8004890:	20004a44 	.word	0x20004a44

08004894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800489a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800489e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048a0:	4b27      	ldr	r3, [pc, #156]	; (8004940 <prvHeapInit+0xac>)
 80048a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3307      	adds	r3, #7
 80048b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0307 	bic.w	r3, r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	4a1f      	ldr	r2, [pc, #124]	; (8004940 <prvHeapInit+0xac>)
 80048c4:	4413      	add	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048cc:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <prvHeapInit+0xb0>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048d2:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <prvHeapInit+0xb0>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4413      	add	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048e0:	2208      	movs	r2, #8
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0307 	bic.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <prvHeapInit+0xb4>)
 80048f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <prvHeapInit+0xb4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2200      	movs	r2, #0
 80048fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <prvHeapInit+0xb4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	1ad2      	subs	r2, r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <prvHeapInit+0xb4>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <prvHeapInit+0xb8>)
 8004922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <prvHeapInit+0xbc>)
 800492a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <prvHeapInit+0xc0>)
 800492e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	20000e2c 	.word	0x20000e2c
 8004944:	20004a2c 	.word	0x20004a2c
 8004948:	20004a34 	.word	0x20004a34
 800494c:	20004a3c 	.word	0x20004a3c
 8004950:	20004a38 	.word	0x20004a38
 8004954:	20004a48 	.word	0x20004a48

08004958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <prvInsertBlockIntoFreeList+0xac>)
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e002      	b.n	800496c <prvInsertBlockIntoFreeList+0x14>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d8f7      	bhi.n	8004966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4413      	add	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d108      	bne.n	800499a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	441a      	add	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	441a      	add	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d118      	bne.n	80049e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <prvInsertBlockIntoFreeList+0xb0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d00d      	beq.n	80049d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e008      	b.n	80049e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <prvInsertBlockIntoFreeList+0xb0>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e003      	b.n	80049e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d002      	beq.n	80049f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20004a2c 	.word	0x20004a2c
 8004a08:	20004a34 	.word	0x20004a34

08004a0c <std>:
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	b510      	push	{r4, lr}
 8004a10:	4604      	mov	r4, r0
 8004a12:	e9c0 3300 	strd	r3, r3, [r0]
 8004a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a1a:	6083      	str	r3, [r0, #8]
 8004a1c:	8181      	strh	r1, [r0, #12]
 8004a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a20:	81c2      	strh	r2, [r0, #14]
 8004a22:	6183      	str	r3, [r0, #24]
 8004a24:	4619      	mov	r1, r3
 8004a26:	2208      	movs	r2, #8
 8004a28:	305c      	adds	r0, #92	; 0x5c
 8004a2a:	f000 f8f4 	bl	8004c16 <memset>
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <std+0x38>)
 8004a30:	6263      	str	r3, [r4, #36]	; 0x24
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <std+0x3c>)
 8004a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <std+0x40>)
 8004a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <std+0x44>)
 8004a3c:	6224      	str	r4, [r4, #32]
 8004a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	bf00      	nop
 8004a44:	08004b91 	.word	0x08004b91
 8004a48:	08004bb3 	.word	0x08004bb3
 8004a4c:	08004beb 	.word	0x08004beb
 8004a50:	08004c0f 	.word	0x08004c0f

08004a54 <stdio_exit_handler>:
 8004a54:	4a02      	ldr	r2, [pc, #8]	; (8004a60 <stdio_exit_handler+0xc>)
 8004a56:	4903      	ldr	r1, [pc, #12]	; (8004a64 <stdio_exit_handler+0x10>)
 8004a58:	4803      	ldr	r0, [pc, #12]	; (8004a68 <stdio_exit_handler+0x14>)
 8004a5a:	f000 b869 	b.w	8004b30 <_fwalk_sglue>
 8004a5e:	bf00      	nop
 8004a60:	2000001c 	.word	0x2000001c
 8004a64:	080055cd 	.word	0x080055cd
 8004a68:	20000028 	.word	0x20000028

08004a6c <cleanup_stdio>:
 8004a6c:	6841      	ldr	r1, [r0, #4]
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <cleanup_stdio+0x34>)
 8004a70:	4299      	cmp	r1, r3
 8004a72:	b510      	push	{r4, lr}
 8004a74:	4604      	mov	r4, r0
 8004a76:	d001      	beq.n	8004a7c <cleanup_stdio+0x10>
 8004a78:	f000 fda8 	bl	80055cc <_fflush_r>
 8004a7c:	68a1      	ldr	r1, [r4, #8]
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <cleanup_stdio+0x38>)
 8004a80:	4299      	cmp	r1, r3
 8004a82:	d002      	beq.n	8004a8a <cleanup_stdio+0x1e>
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 fda1 	bl	80055cc <_fflush_r>
 8004a8a:	68e1      	ldr	r1, [r4, #12]
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <cleanup_stdio+0x3c>)
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	d004      	beq.n	8004a9c <cleanup_stdio+0x30>
 8004a92:	4620      	mov	r0, r4
 8004a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a98:	f000 bd98 	b.w	80055cc <_fflush_r>
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20004a4c 	.word	0x20004a4c
 8004aa4:	20004ab4 	.word	0x20004ab4
 8004aa8:	20004b1c 	.word	0x20004b1c

08004aac <global_stdio_init.part.0>:
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <global_stdio_init.part.0+0x30>)
 8004ab0:	4c0b      	ldr	r4, [pc, #44]	; (8004ae0 <global_stdio_init.part.0+0x34>)
 8004ab2:	4a0c      	ldr	r2, [pc, #48]	; (8004ae4 <global_stdio_init.part.0+0x38>)
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2104      	movs	r1, #4
 8004abc:	f7ff ffa6 	bl	8004a0c <std>
 8004ac0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2109      	movs	r1, #9
 8004ac8:	f7ff ffa0 	bl	8004a0c <std>
 8004acc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad6:	2112      	movs	r1, #18
 8004ad8:	f7ff bf98 	b.w	8004a0c <std>
 8004adc:	20004b84 	.word	0x20004b84
 8004ae0:	20004a4c 	.word	0x20004a4c
 8004ae4:	08004a55 	.word	0x08004a55

08004ae8 <__sfp_lock_acquire>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <__sfp_lock_acquire+0x8>)
 8004aea:	f000 b90d 	b.w	8004d08 <__retarget_lock_acquire_recursive>
 8004aee:	bf00      	nop
 8004af0:	20004b8d 	.word	0x20004b8d

08004af4 <__sfp_lock_release>:
 8004af4:	4801      	ldr	r0, [pc, #4]	; (8004afc <__sfp_lock_release+0x8>)
 8004af6:	f000 b908 	b.w	8004d0a <__retarget_lock_release_recursive>
 8004afa:	bf00      	nop
 8004afc:	20004b8d 	.word	0x20004b8d

08004b00 <__sinit>:
 8004b00:	b510      	push	{r4, lr}
 8004b02:	4604      	mov	r4, r0
 8004b04:	f7ff fff0 	bl	8004ae8 <__sfp_lock_acquire>
 8004b08:	6a23      	ldr	r3, [r4, #32]
 8004b0a:	b11b      	cbz	r3, 8004b14 <__sinit+0x14>
 8004b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b10:	f7ff bff0 	b.w	8004af4 <__sfp_lock_release>
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <__sinit+0x28>)
 8004b16:	6223      	str	r3, [r4, #32]
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <__sinit+0x2c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f5      	bne.n	8004b0c <__sinit+0xc>
 8004b20:	f7ff ffc4 	bl	8004aac <global_stdio_init.part.0>
 8004b24:	e7f2      	b.n	8004b0c <__sinit+0xc>
 8004b26:	bf00      	nop
 8004b28:	08004a6d 	.word	0x08004a6d
 8004b2c:	20004b84 	.word	0x20004b84

08004b30 <_fwalk_sglue>:
 8004b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b34:	4607      	mov	r7, r0
 8004b36:	4688      	mov	r8, r1
 8004b38:	4614      	mov	r4, r2
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b40:	f1b9 0901 	subs.w	r9, r9, #1
 8004b44:	d505      	bpl.n	8004b52 <_fwalk_sglue+0x22>
 8004b46:	6824      	ldr	r4, [r4, #0]
 8004b48:	2c00      	cmp	r4, #0
 8004b4a:	d1f7      	bne.n	8004b3c <_fwalk_sglue+0xc>
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b52:	89ab      	ldrh	r3, [r5, #12]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d907      	bls.n	8004b68 <_fwalk_sglue+0x38>
 8004b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	d003      	beq.n	8004b68 <_fwalk_sglue+0x38>
 8004b60:	4629      	mov	r1, r5
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	4306      	orrs	r6, r0
 8004b68:	3568      	adds	r5, #104	; 0x68
 8004b6a:	e7e9      	b.n	8004b40 <_fwalk_sglue+0x10>

08004b6c <iprintf>:
 8004b6c:	b40f      	push	{r0, r1, r2, r3}
 8004b6e:	b507      	push	{r0, r1, r2, lr}
 8004b70:	4906      	ldr	r1, [pc, #24]	; (8004b8c <iprintf+0x20>)
 8004b72:	ab04      	add	r3, sp, #16
 8004b74:	6808      	ldr	r0, [r1, #0]
 8004b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b7a:	6881      	ldr	r1, [r0, #8]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	f000 f9f5 	bl	8004f6c <_vfiprintf_r>
 8004b82:	b003      	add	sp, #12
 8004b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b88:	b004      	add	sp, #16
 8004b8a:	4770      	bx	lr
 8004b8c:	20000074 	.word	0x20000074

08004b90 <__sread>:
 8004b90:	b510      	push	{r4, lr}
 8004b92:	460c      	mov	r4, r1
 8004b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b98:	f000 f868 	bl	8004c6c <_read_r>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	bfab      	itete	ge
 8004ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ba4:	181b      	addge	r3, r3, r0
 8004ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004baa:	bfac      	ite	ge
 8004bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bae:	81a3      	strhlt	r3, [r4, #12]
 8004bb0:	bd10      	pop	{r4, pc}

08004bb2 <__swrite>:
 8004bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb6:	461f      	mov	r7, r3
 8004bb8:	898b      	ldrh	r3, [r1, #12]
 8004bba:	05db      	lsls	r3, r3, #23
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	4616      	mov	r6, r2
 8004bc2:	d505      	bpl.n	8004bd0 <__swrite+0x1e>
 8004bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc8:	2302      	movs	r3, #2
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f000 f83c 	bl	8004c48 <_lseek_r>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	4632      	mov	r2, r6
 8004bde:	463b      	mov	r3, r7
 8004be0:	4628      	mov	r0, r5
 8004be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004be6:	f000 b853 	b.w	8004c90 <_write_r>

08004bea <__sseek>:
 8004bea:	b510      	push	{r4, lr}
 8004bec:	460c      	mov	r4, r1
 8004bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf2:	f000 f829 	bl	8004c48 <_lseek_r>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	bf15      	itete	ne
 8004bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c06:	81a3      	strheq	r3, [r4, #12]
 8004c08:	bf18      	it	ne
 8004c0a:	81a3      	strhne	r3, [r4, #12]
 8004c0c:	bd10      	pop	{r4, pc}

08004c0e <__sclose>:
 8004c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c12:	f000 b809 	b.w	8004c28 <_close_r>

08004c16 <memset>:
 8004c16:	4402      	add	r2, r0
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d100      	bne.n	8004c20 <memset+0xa>
 8004c1e:	4770      	bx	lr
 8004c20:	f803 1b01 	strb.w	r1, [r3], #1
 8004c24:	e7f9      	b.n	8004c1a <memset+0x4>
	...

08004c28 <_close_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4d06      	ldr	r5, [pc, #24]	; (8004c44 <_close_r+0x1c>)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	f7fb fef7 	bl	8000a26 <_close>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_close_r+0x1a>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_close_r+0x1a>
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	20004b88 	.word	0x20004b88

08004c48 <_lseek_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d07      	ldr	r5, [pc, #28]	; (8004c68 <_lseek_r+0x20>)
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	4608      	mov	r0, r1
 8004c50:	4611      	mov	r1, r2
 8004c52:	2200      	movs	r2, #0
 8004c54:	602a      	str	r2, [r5, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f7fb ff0c 	bl	8000a74 <_lseek>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d102      	bne.n	8004c66 <_lseek_r+0x1e>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	b103      	cbz	r3, 8004c66 <_lseek_r+0x1e>
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	20004b88 	.word	0x20004b88

08004c6c <_read_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4d07      	ldr	r5, [pc, #28]	; (8004c8c <_read_r+0x20>)
 8004c70:	4604      	mov	r4, r0
 8004c72:	4608      	mov	r0, r1
 8004c74:	4611      	mov	r1, r2
 8004c76:	2200      	movs	r2, #0
 8004c78:	602a      	str	r2, [r5, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f7fb fe9a 	bl	80009b4 <_read>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_read_r+0x1e>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_read_r+0x1e>
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	20004b88 	.word	0x20004b88

08004c90 <_write_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d07      	ldr	r5, [pc, #28]	; (8004cb0 <_write_r+0x20>)
 8004c94:	4604      	mov	r4, r0
 8004c96:	4608      	mov	r0, r1
 8004c98:	4611      	mov	r1, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	602a      	str	r2, [r5, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f7fb fea5 	bl	80009ee <_write>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_write_r+0x1e>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_write_r+0x1e>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	20004b88 	.word	0x20004b88

08004cb4 <__errno>:
 8004cb4:	4b01      	ldr	r3, [pc, #4]	; (8004cbc <__errno+0x8>)
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000074 	.word	0x20000074

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	4d0d      	ldr	r5, [pc, #52]	; (8004cf8 <__libc_init_array+0x38>)
 8004cc4:	4c0d      	ldr	r4, [pc, #52]	; (8004cfc <__libc_init_array+0x3c>)
 8004cc6:	1b64      	subs	r4, r4, r5
 8004cc8:	10a4      	asrs	r4, r4, #2
 8004cca:	2600      	movs	r6, #0
 8004ccc:	42a6      	cmp	r6, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	4d0b      	ldr	r5, [pc, #44]	; (8004d00 <__libc_init_array+0x40>)
 8004cd2:	4c0c      	ldr	r4, [pc, #48]	; (8004d04 <__libc_init_array+0x44>)
 8004cd4:	f000 fdcc 	bl	8005870 <_init>
 8004cd8:	1b64      	subs	r4, r4, r5
 8004cda:	10a4      	asrs	r4, r4, #2
 8004cdc:	2600      	movs	r6, #0
 8004cde:	42a6      	cmp	r6, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce8:	4798      	blx	r3
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf2:	4798      	blx	r3
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	08005a2c 	.word	0x08005a2c
 8004cfc:	08005a2c 	.word	0x08005a2c
 8004d00:	08005a2c 	.word	0x08005a2c
 8004d04:	08005a30 	.word	0x08005a30

08004d08 <__retarget_lock_acquire_recursive>:
 8004d08:	4770      	bx	lr

08004d0a <__retarget_lock_release_recursive>:
 8004d0a:	4770      	bx	lr

08004d0c <memcpy>:
 8004d0c:	440a      	add	r2, r1
 8004d0e:	4291      	cmp	r1, r2
 8004d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d14:	d100      	bne.n	8004d18 <memcpy+0xc>
 8004d16:	4770      	bx	lr
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d22:	4291      	cmp	r1, r2
 8004d24:	d1f9      	bne.n	8004d1a <memcpy+0xe>
 8004d26:	bd10      	pop	{r4, pc}

08004d28 <_free_r>:
 8004d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d2a:	2900      	cmp	r1, #0
 8004d2c:	d044      	beq.n	8004db8 <_free_r+0x90>
 8004d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d32:	9001      	str	r0, [sp, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f1a1 0404 	sub.w	r4, r1, #4
 8004d3a:	bfb8      	it	lt
 8004d3c:	18e4      	addlt	r4, r4, r3
 8004d3e:	f000 f8df 	bl	8004f00 <__malloc_lock>
 8004d42:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <_free_r+0x94>)
 8004d44:	9801      	ldr	r0, [sp, #4]
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	b933      	cbnz	r3, 8004d58 <_free_r+0x30>
 8004d4a:	6063      	str	r3, [r4, #4]
 8004d4c:	6014      	str	r4, [r2, #0]
 8004d4e:	b003      	add	sp, #12
 8004d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d54:	f000 b8da 	b.w	8004f0c <__malloc_unlock>
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	d908      	bls.n	8004d6e <_free_r+0x46>
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	1961      	adds	r1, r4, r5
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf01      	itttt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	1949      	addeq	r1, r1, r5
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	e7ed      	b.n	8004d4a <_free_r+0x22>
 8004d6e:	461a      	mov	r2, r3
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b10b      	cbz	r3, 8004d78 <_free_r+0x50>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d9fa      	bls.n	8004d6e <_free_r+0x46>
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	1855      	adds	r5, r2, r1
 8004d7c:	42a5      	cmp	r5, r4
 8004d7e:	d10b      	bne.n	8004d98 <_free_r+0x70>
 8004d80:	6824      	ldr	r4, [r4, #0]
 8004d82:	4421      	add	r1, r4
 8004d84:	1854      	adds	r4, r2, r1
 8004d86:	42a3      	cmp	r3, r4
 8004d88:	6011      	str	r1, [r2, #0]
 8004d8a:	d1e0      	bne.n	8004d4e <_free_r+0x26>
 8004d8c:	681c      	ldr	r4, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	6053      	str	r3, [r2, #4]
 8004d92:	440c      	add	r4, r1
 8004d94:	6014      	str	r4, [r2, #0]
 8004d96:	e7da      	b.n	8004d4e <_free_r+0x26>
 8004d98:	d902      	bls.n	8004da0 <_free_r+0x78>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	6003      	str	r3, [r0, #0]
 8004d9e:	e7d6      	b.n	8004d4e <_free_r+0x26>
 8004da0:	6825      	ldr	r5, [r4, #0]
 8004da2:	1961      	adds	r1, r4, r5
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf04      	itt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	bf04      	itt	eq
 8004db0:	1949      	addeq	r1, r1, r5
 8004db2:	6021      	streq	r1, [r4, #0]
 8004db4:	6054      	str	r4, [r2, #4]
 8004db6:	e7ca      	b.n	8004d4e <_free_r+0x26>
 8004db8:	b003      	add	sp, #12
 8004dba:	bd30      	pop	{r4, r5, pc}
 8004dbc:	20004b90 	.word	0x20004b90

08004dc0 <sbrk_aligned>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4e0e      	ldr	r6, [pc, #56]	; (8004dfc <sbrk_aligned+0x3c>)
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	6831      	ldr	r1, [r6, #0]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	b911      	cbnz	r1, 8004dd2 <sbrk_aligned+0x12>
 8004dcc:	f000 fcbc 	bl	8005748 <_sbrk_r>
 8004dd0:	6030      	str	r0, [r6, #0]
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 fcb7 	bl	8005748 <_sbrk_r>
 8004dda:	1c43      	adds	r3, r0, #1
 8004ddc:	d00a      	beq.n	8004df4 <sbrk_aligned+0x34>
 8004dde:	1cc4      	adds	r4, r0, #3
 8004de0:	f024 0403 	bic.w	r4, r4, #3
 8004de4:	42a0      	cmp	r0, r4
 8004de6:	d007      	beq.n	8004df8 <sbrk_aligned+0x38>
 8004de8:	1a21      	subs	r1, r4, r0
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 fcac 	bl	8005748 <_sbrk_r>
 8004df0:	3001      	adds	r0, #1
 8004df2:	d101      	bne.n	8004df8 <sbrk_aligned+0x38>
 8004df4:	f04f 34ff 	mov.w	r4, #4294967295
 8004df8:	4620      	mov	r0, r4
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	20004b94 	.word	0x20004b94

08004e00 <_malloc_r>:
 8004e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e04:	1ccd      	adds	r5, r1, #3
 8004e06:	f025 0503 	bic.w	r5, r5, #3
 8004e0a:	3508      	adds	r5, #8
 8004e0c:	2d0c      	cmp	r5, #12
 8004e0e:	bf38      	it	cc
 8004e10:	250c      	movcc	r5, #12
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	4607      	mov	r7, r0
 8004e16:	db01      	blt.n	8004e1c <_malloc_r+0x1c>
 8004e18:	42a9      	cmp	r1, r5
 8004e1a:	d905      	bls.n	8004e28 <_malloc_r+0x28>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	2600      	movs	r6, #0
 8004e22:	4630      	mov	r0, r6
 8004e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004efc <_malloc_r+0xfc>
 8004e2c:	f000 f868 	bl	8004f00 <__malloc_lock>
 8004e30:	f8d8 3000 	ldr.w	r3, [r8]
 8004e34:	461c      	mov	r4, r3
 8004e36:	bb5c      	cbnz	r4, 8004e90 <_malloc_r+0x90>
 8004e38:	4629      	mov	r1, r5
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f7ff ffc0 	bl	8004dc0 <sbrk_aligned>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	4604      	mov	r4, r0
 8004e44:	d155      	bne.n	8004ef2 <_malloc_r+0xf2>
 8004e46:	f8d8 4000 	ldr.w	r4, [r8]
 8004e4a:	4626      	mov	r6, r4
 8004e4c:	2e00      	cmp	r6, #0
 8004e4e:	d145      	bne.n	8004edc <_malloc_r+0xdc>
 8004e50:	2c00      	cmp	r4, #0
 8004e52:	d048      	beq.n	8004ee6 <_malloc_r+0xe6>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	4631      	mov	r1, r6
 8004e58:	4638      	mov	r0, r7
 8004e5a:	eb04 0903 	add.w	r9, r4, r3
 8004e5e:	f000 fc73 	bl	8005748 <_sbrk_r>
 8004e62:	4581      	cmp	r9, r0
 8004e64:	d13f      	bne.n	8004ee6 <_malloc_r+0xe6>
 8004e66:	6821      	ldr	r1, [r4, #0]
 8004e68:	1a6d      	subs	r5, r5, r1
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff ffa7 	bl	8004dc0 <sbrk_aligned>
 8004e72:	3001      	adds	r0, #1
 8004e74:	d037      	beq.n	8004ee6 <_malloc_r+0xe6>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	442b      	add	r3, r5
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d038      	beq.n	8004ef6 <_malloc_r+0xf6>
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	42a2      	cmp	r2, r4
 8004e88:	d12b      	bne.n	8004ee2 <_malloc_r+0xe2>
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	e00f      	b.n	8004eb0 <_malloc_r+0xb0>
 8004e90:	6822      	ldr	r2, [r4, #0]
 8004e92:	1b52      	subs	r2, r2, r5
 8004e94:	d41f      	bmi.n	8004ed6 <_malloc_r+0xd6>
 8004e96:	2a0b      	cmp	r2, #11
 8004e98:	d917      	bls.n	8004eca <_malloc_r+0xca>
 8004e9a:	1961      	adds	r1, r4, r5
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	6025      	str	r5, [r4, #0]
 8004ea0:	bf18      	it	ne
 8004ea2:	6059      	strne	r1, [r3, #4]
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	bf08      	it	eq
 8004ea8:	f8c8 1000 	streq.w	r1, [r8]
 8004eac:	5162      	str	r2, [r4, r5]
 8004eae:	604b      	str	r3, [r1, #4]
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f104 060b 	add.w	r6, r4, #11
 8004eb6:	f000 f829 	bl	8004f0c <__malloc_unlock>
 8004eba:	f026 0607 	bic.w	r6, r6, #7
 8004ebe:	1d23      	adds	r3, r4, #4
 8004ec0:	1af2      	subs	r2, r6, r3
 8004ec2:	d0ae      	beq.n	8004e22 <_malloc_r+0x22>
 8004ec4:	1b9b      	subs	r3, r3, r6
 8004ec6:	50a3      	str	r3, [r4, r2]
 8004ec8:	e7ab      	b.n	8004e22 <_malloc_r+0x22>
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	6862      	ldr	r2, [r4, #4]
 8004ece:	d1dd      	bne.n	8004e8c <_malloc_r+0x8c>
 8004ed0:	f8c8 2000 	str.w	r2, [r8]
 8004ed4:	e7ec      	b.n	8004eb0 <_malloc_r+0xb0>
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	6864      	ldr	r4, [r4, #4]
 8004eda:	e7ac      	b.n	8004e36 <_malloc_r+0x36>
 8004edc:	4634      	mov	r4, r6
 8004ede:	6876      	ldr	r6, [r6, #4]
 8004ee0:	e7b4      	b.n	8004e4c <_malloc_r+0x4c>
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	e7cc      	b.n	8004e80 <_malloc_r+0x80>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	4638      	mov	r0, r7
 8004eec:	f000 f80e 	bl	8004f0c <__malloc_unlock>
 8004ef0:	e797      	b.n	8004e22 <_malloc_r+0x22>
 8004ef2:	6025      	str	r5, [r4, #0]
 8004ef4:	e7dc      	b.n	8004eb0 <_malloc_r+0xb0>
 8004ef6:	605b      	str	r3, [r3, #4]
 8004ef8:	deff      	udf	#255	; 0xff
 8004efa:	bf00      	nop
 8004efc:	20004b90 	.word	0x20004b90

08004f00 <__malloc_lock>:
 8004f00:	4801      	ldr	r0, [pc, #4]	; (8004f08 <__malloc_lock+0x8>)
 8004f02:	f7ff bf01 	b.w	8004d08 <__retarget_lock_acquire_recursive>
 8004f06:	bf00      	nop
 8004f08:	20004b8c 	.word	0x20004b8c

08004f0c <__malloc_unlock>:
 8004f0c:	4801      	ldr	r0, [pc, #4]	; (8004f14 <__malloc_unlock+0x8>)
 8004f0e:	f7ff befc 	b.w	8004d0a <__retarget_lock_release_recursive>
 8004f12:	bf00      	nop
 8004f14:	20004b8c 	.word	0x20004b8c

08004f18 <__sfputc_r>:
 8004f18:	6893      	ldr	r3, [r2, #8]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	b410      	push	{r4}
 8004f20:	6093      	str	r3, [r2, #8]
 8004f22:	da08      	bge.n	8004f36 <__sfputc_r+0x1e>
 8004f24:	6994      	ldr	r4, [r2, #24]
 8004f26:	42a3      	cmp	r3, r4
 8004f28:	db01      	blt.n	8004f2e <__sfputc_r+0x16>
 8004f2a:	290a      	cmp	r1, #10
 8004f2c:	d103      	bne.n	8004f36 <__sfputc_r+0x1e>
 8004f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f32:	f000 bb73 	b.w	800561c <__swbuf_r>
 8004f36:	6813      	ldr	r3, [r2, #0]
 8004f38:	1c58      	adds	r0, r3, #1
 8004f3a:	6010      	str	r0, [r2, #0]
 8004f3c:	7019      	strb	r1, [r3, #0]
 8004f3e:	4608      	mov	r0, r1
 8004f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <__sfputs_r>:
 8004f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f48:	4606      	mov	r6, r0
 8004f4a:	460f      	mov	r7, r1
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	18d5      	adds	r5, r2, r3
 8004f50:	42ac      	cmp	r4, r5
 8004f52:	d101      	bne.n	8004f58 <__sfputs_r+0x12>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e007      	b.n	8004f68 <__sfputs_r+0x22>
 8004f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5c:	463a      	mov	r2, r7
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7ff ffda 	bl	8004f18 <__sfputc_r>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d1f3      	bne.n	8004f50 <__sfputs_r+0xa>
 8004f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f6c <_vfiprintf_r>:
 8004f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f70:	460d      	mov	r5, r1
 8004f72:	b09d      	sub	sp, #116	; 0x74
 8004f74:	4614      	mov	r4, r2
 8004f76:	4698      	mov	r8, r3
 8004f78:	4606      	mov	r6, r0
 8004f7a:	b118      	cbz	r0, 8004f84 <_vfiprintf_r+0x18>
 8004f7c:	6a03      	ldr	r3, [r0, #32]
 8004f7e:	b90b      	cbnz	r3, 8004f84 <_vfiprintf_r+0x18>
 8004f80:	f7ff fdbe 	bl	8004b00 <__sinit>
 8004f84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f86:	07d9      	lsls	r1, r3, #31
 8004f88:	d405      	bmi.n	8004f96 <_vfiprintf_r+0x2a>
 8004f8a:	89ab      	ldrh	r3, [r5, #12]
 8004f8c:	059a      	lsls	r2, r3, #22
 8004f8e:	d402      	bmi.n	8004f96 <_vfiprintf_r+0x2a>
 8004f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f92:	f7ff feb9 	bl	8004d08 <__retarget_lock_acquire_recursive>
 8004f96:	89ab      	ldrh	r3, [r5, #12]
 8004f98:	071b      	lsls	r3, r3, #28
 8004f9a:	d501      	bpl.n	8004fa0 <_vfiprintf_r+0x34>
 8004f9c:	692b      	ldr	r3, [r5, #16]
 8004f9e:	b99b      	cbnz	r3, 8004fc8 <_vfiprintf_r+0x5c>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f000 fb78 	bl	8005698 <__swsetup_r>
 8004fa8:	b170      	cbz	r0, 8004fc8 <_vfiprintf_r+0x5c>
 8004faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fac:	07dc      	lsls	r4, r3, #31
 8004fae:	d504      	bpl.n	8004fba <_vfiprintf_r+0x4e>
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	b01d      	add	sp, #116	; 0x74
 8004fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fba:	89ab      	ldrh	r3, [r5, #12]
 8004fbc:	0598      	lsls	r0, r3, #22
 8004fbe:	d4f7      	bmi.n	8004fb0 <_vfiprintf_r+0x44>
 8004fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fc2:	f7ff fea2 	bl	8004d0a <__retarget_lock_release_recursive>
 8004fc6:	e7f3      	b.n	8004fb0 <_vfiprintf_r+0x44>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9309      	str	r3, [sp, #36]	; 0x24
 8004fcc:	2320      	movs	r3, #32
 8004fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fd6:	2330      	movs	r3, #48	; 0x30
 8004fd8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800518c <_vfiprintf_r+0x220>
 8004fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fe0:	f04f 0901 	mov.w	r9, #1
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	469a      	mov	sl, r3
 8004fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fec:	b10a      	cbz	r2, 8004ff2 <_vfiprintf_r+0x86>
 8004fee:	2a25      	cmp	r2, #37	; 0x25
 8004ff0:	d1f9      	bne.n	8004fe6 <_vfiprintf_r+0x7a>
 8004ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ff6:	d00b      	beq.n	8005010 <_vfiprintf_r+0xa4>
 8004ff8:	465b      	mov	r3, fp
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4630      	mov	r0, r6
 8005000:	f7ff ffa1 	bl	8004f46 <__sfputs_r>
 8005004:	3001      	adds	r0, #1
 8005006:	f000 80a9 	beq.w	800515c <_vfiprintf_r+0x1f0>
 800500a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800500c:	445a      	add	r2, fp
 800500e:	9209      	str	r2, [sp, #36]	; 0x24
 8005010:	f89a 3000 	ldrb.w	r3, [sl]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80a1 	beq.w	800515c <_vfiprintf_r+0x1f0>
 800501a:	2300      	movs	r3, #0
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005024:	f10a 0a01 	add.w	sl, sl, #1
 8005028:	9304      	str	r3, [sp, #16]
 800502a:	9307      	str	r3, [sp, #28]
 800502c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005030:	931a      	str	r3, [sp, #104]	; 0x68
 8005032:	4654      	mov	r4, sl
 8005034:	2205      	movs	r2, #5
 8005036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800503a:	4854      	ldr	r0, [pc, #336]	; (800518c <_vfiprintf_r+0x220>)
 800503c:	f7fb f8c8 	bl	80001d0 <memchr>
 8005040:	9a04      	ldr	r2, [sp, #16]
 8005042:	b9d8      	cbnz	r0, 800507c <_vfiprintf_r+0x110>
 8005044:	06d1      	lsls	r1, r2, #27
 8005046:	bf44      	itt	mi
 8005048:	2320      	movmi	r3, #32
 800504a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800504e:	0713      	lsls	r3, r2, #28
 8005050:	bf44      	itt	mi
 8005052:	232b      	movmi	r3, #43	; 0x2b
 8005054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005058:	f89a 3000 	ldrb.w	r3, [sl]
 800505c:	2b2a      	cmp	r3, #42	; 0x2a
 800505e:	d015      	beq.n	800508c <_vfiprintf_r+0x120>
 8005060:	9a07      	ldr	r2, [sp, #28]
 8005062:	4654      	mov	r4, sl
 8005064:	2000      	movs	r0, #0
 8005066:	f04f 0c0a 	mov.w	ip, #10
 800506a:	4621      	mov	r1, r4
 800506c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005070:	3b30      	subs	r3, #48	; 0x30
 8005072:	2b09      	cmp	r3, #9
 8005074:	d94d      	bls.n	8005112 <_vfiprintf_r+0x1a6>
 8005076:	b1b0      	cbz	r0, 80050a6 <_vfiprintf_r+0x13a>
 8005078:	9207      	str	r2, [sp, #28]
 800507a:	e014      	b.n	80050a6 <_vfiprintf_r+0x13a>
 800507c:	eba0 0308 	sub.w	r3, r0, r8
 8005080:	fa09 f303 	lsl.w	r3, r9, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	9304      	str	r3, [sp, #16]
 8005088:	46a2      	mov	sl, r4
 800508a:	e7d2      	b.n	8005032 <_vfiprintf_r+0xc6>
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	1d19      	adds	r1, r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	9103      	str	r1, [sp, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	bfbb      	ittet	lt
 8005098:	425b      	neglt	r3, r3
 800509a:	f042 0202 	orrlt.w	r2, r2, #2
 800509e:	9307      	strge	r3, [sp, #28]
 80050a0:	9307      	strlt	r3, [sp, #28]
 80050a2:	bfb8      	it	lt
 80050a4:	9204      	strlt	r2, [sp, #16]
 80050a6:	7823      	ldrb	r3, [r4, #0]
 80050a8:	2b2e      	cmp	r3, #46	; 0x2e
 80050aa:	d10c      	bne.n	80050c6 <_vfiprintf_r+0x15a>
 80050ac:	7863      	ldrb	r3, [r4, #1]
 80050ae:	2b2a      	cmp	r3, #42	; 0x2a
 80050b0:	d134      	bne.n	800511c <_vfiprintf_r+0x1b0>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	1d1a      	adds	r2, r3, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	9203      	str	r2, [sp, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bfb8      	it	lt
 80050be:	f04f 33ff 	movlt.w	r3, #4294967295
 80050c2:	3402      	adds	r4, #2
 80050c4:	9305      	str	r3, [sp, #20]
 80050c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800519c <_vfiprintf_r+0x230>
 80050ca:	7821      	ldrb	r1, [r4, #0]
 80050cc:	2203      	movs	r2, #3
 80050ce:	4650      	mov	r0, sl
 80050d0:	f7fb f87e 	bl	80001d0 <memchr>
 80050d4:	b138      	cbz	r0, 80050e6 <_vfiprintf_r+0x17a>
 80050d6:	9b04      	ldr	r3, [sp, #16]
 80050d8:	eba0 000a 	sub.w	r0, r0, sl
 80050dc:	2240      	movs	r2, #64	; 0x40
 80050de:	4082      	lsls	r2, r0
 80050e0:	4313      	orrs	r3, r2
 80050e2:	3401      	adds	r4, #1
 80050e4:	9304      	str	r3, [sp, #16]
 80050e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ea:	4829      	ldr	r0, [pc, #164]	; (8005190 <_vfiprintf_r+0x224>)
 80050ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050f0:	2206      	movs	r2, #6
 80050f2:	f7fb f86d 	bl	80001d0 <memchr>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d03f      	beq.n	800517a <_vfiprintf_r+0x20e>
 80050fa:	4b26      	ldr	r3, [pc, #152]	; (8005194 <_vfiprintf_r+0x228>)
 80050fc:	bb1b      	cbnz	r3, 8005146 <_vfiprintf_r+0x1da>
 80050fe:	9b03      	ldr	r3, [sp, #12]
 8005100:	3307      	adds	r3, #7
 8005102:	f023 0307 	bic.w	r3, r3, #7
 8005106:	3308      	adds	r3, #8
 8005108:	9303      	str	r3, [sp, #12]
 800510a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510c:	443b      	add	r3, r7
 800510e:	9309      	str	r3, [sp, #36]	; 0x24
 8005110:	e768      	b.n	8004fe4 <_vfiprintf_r+0x78>
 8005112:	fb0c 3202 	mla	r2, ip, r2, r3
 8005116:	460c      	mov	r4, r1
 8005118:	2001      	movs	r0, #1
 800511a:	e7a6      	b.n	800506a <_vfiprintf_r+0xfe>
 800511c:	2300      	movs	r3, #0
 800511e:	3401      	adds	r4, #1
 8005120:	9305      	str	r3, [sp, #20]
 8005122:	4619      	mov	r1, r3
 8005124:	f04f 0c0a 	mov.w	ip, #10
 8005128:	4620      	mov	r0, r4
 800512a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800512e:	3a30      	subs	r2, #48	; 0x30
 8005130:	2a09      	cmp	r2, #9
 8005132:	d903      	bls.n	800513c <_vfiprintf_r+0x1d0>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0c6      	beq.n	80050c6 <_vfiprintf_r+0x15a>
 8005138:	9105      	str	r1, [sp, #20]
 800513a:	e7c4      	b.n	80050c6 <_vfiprintf_r+0x15a>
 800513c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005140:	4604      	mov	r4, r0
 8005142:	2301      	movs	r3, #1
 8005144:	e7f0      	b.n	8005128 <_vfiprintf_r+0x1bc>
 8005146:	ab03      	add	r3, sp, #12
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	462a      	mov	r2, r5
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <_vfiprintf_r+0x22c>)
 800514e:	a904      	add	r1, sp, #16
 8005150:	4630      	mov	r0, r6
 8005152:	f3af 8000 	nop.w
 8005156:	4607      	mov	r7, r0
 8005158:	1c78      	adds	r0, r7, #1
 800515a:	d1d6      	bne.n	800510a <_vfiprintf_r+0x19e>
 800515c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800515e:	07d9      	lsls	r1, r3, #31
 8005160:	d405      	bmi.n	800516e <_vfiprintf_r+0x202>
 8005162:	89ab      	ldrh	r3, [r5, #12]
 8005164:	059a      	lsls	r2, r3, #22
 8005166:	d402      	bmi.n	800516e <_vfiprintf_r+0x202>
 8005168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800516a:	f7ff fdce 	bl	8004d0a <__retarget_lock_release_recursive>
 800516e:	89ab      	ldrh	r3, [r5, #12]
 8005170:	065b      	lsls	r3, r3, #25
 8005172:	f53f af1d 	bmi.w	8004fb0 <_vfiprintf_r+0x44>
 8005176:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005178:	e71c      	b.n	8004fb4 <_vfiprintf_r+0x48>
 800517a:	ab03      	add	r3, sp, #12
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	462a      	mov	r2, r5
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <_vfiprintf_r+0x22c>)
 8005182:	a904      	add	r1, sp, #16
 8005184:	4630      	mov	r0, r6
 8005186:	f000 f879 	bl	800527c <_printf_i>
 800518a:	e7e4      	b.n	8005156 <_vfiprintf_r+0x1ea>
 800518c:	080059f0 	.word	0x080059f0
 8005190:	080059fa 	.word	0x080059fa
 8005194:	00000000 	.word	0x00000000
 8005198:	08004f47 	.word	0x08004f47
 800519c:	080059f6 	.word	0x080059f6

080051a0 <_printf_common>:
 80051a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a4:	4616      	mov	r6, r2
 80051a6:	4699      	mov	r9, r3
 80051a8:	688a      	ldr	r2, [r1, #8]
 80051aa:	690b      	ldr	r3, [r1, #16]
 80051ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051b0:	4293      	cmp	r3, r2
 80051b2:	bfb8      	it	lt
 80051b4:	4613      	movlt	r3, r2
 80051b6:	6033      	str	r3, [r6, #0]
 80051b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051bc:	4607      	mov	r7, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	b10a      	cbz	r2, 80051c6 <_printf_common+0x26>
 80051c2:	3301      	adds	r3, #1
 80051c4:	6033      	str	r3, [r6, #0]
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	0699      	lsls	r1, r3, #26
 80051ca:	bf42      	ittt	mi
 80051cc:	6833      	ldrmi	r3, [r6, #0]
 80051ce:	3302      	addmi	r3, #2
 80051d0:	6033      	strmi	r3, [r6, #0]
 80051d2:	6825      	ldr	r5, [r4, #0]
 80051d4:	f015 0506 	ands.w	r5, r5, #6
 80051d8:	d106      	bne.n	80051e8 <_printf_common+0x48>
 80051da:	f104 0a19 	add.w	sl, r4, #25
 80051de:	68e3      	ldr	r3, [r4, #12]
 80051e0:	6832      	ldr	r2, [r6, #0]
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	42ab      	cmp	r3, r5
 80051e6:	dc26      	bgt.n	8005236 <_printf_common+0x96>
 80051e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051ec:	1e13      	subs	r3, r2, #0
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	bf18      	it	ne
 80051f2:	2301      	movne	r3, #1
 80051f4:	0692      	lsls	r2, r2, #26
 80051f6:	d42b      	bmi.n	8005250 <_printf_common+0xb0>
 80051f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051fc:	4649      	mov	r1, r9
 80051fe:	4638      	mov	r0, r7
 8005200:	47c0      	blx	r8
 8005202:	3001      	adds	r0, #1
 8005204:	d01e      	beq.n	8005244 <_printf_common+0xa4>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	6922      	ldr	r2, [r4, #16]
 800520a:	f003 0306 	and.w	r3, r3, #6
 800520e:	2b04      	cmp	r3, #4
 8005210:	bf02      	ittt	eq
 8005212:	68e5      	ldreq	r5, [r4, #12]
 8005214:	6833      	ldreq	r3, [r6, #0]
 8005216:	1aed      	subeq	r5, r5, r3
 8005218:	68a3      	ldr	r3, [r4, #8]
 800521a:	bf0c      	ite	eq
 800521c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005220:	2500      	movne	r5, #0
 8005222:	4293      	cmp	r3, r2
 8005224:	bfc4      	itt	gt
 8005226:	1a9b      	subgt	r3, r3, r2
 8005228:	18ed      	addgt	r5, r5, r3
 800522a:	2600      	movs	r6, #0
 800522c:	341a      	adds	r4, #26
 800522e:	42b5      	cmp	r5, r6
 8005230:	d11a      	bne.n	8005268 <_printf_common+0xc8>
 8005232:	2000      	movs	r0, #0
 8005234:	e008      	b.n	8005248 <_printf_common+0xa8>
 8005236:	2301      	movs	r3, #1
 8005238:	4652      	mov	r2, sl
 800523a:	4649      	mov	r1, r9
 800523c:	4638      	mov	r0, r7
 800523e:	47c0      	blx	r8
 8005240:	3001      	adds	r0, #1
 8005242:	d103      	bne.n	800524c <_printf_common+0xac>
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524c:	3501      	adds	r5, #1
 800524e:	e7c6      	b.n	80051de <_printf_common+0x3e>
 8005250:	18e1      	adds	r1, r4, r3
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	2030      	movs	r0, #48	; 0x30
 8005256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800525a:	4422      	add	r2, r4
 800525c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005264:	3302      	adds	r3, #2
 8005266:	e7c7      	b.n	80051f8 <_printf_common+0x58>
 8005268:	2301      	movs	r3, #1
 800526a:	4622      	mov	r2, r4
 800526c:	4649      	mov	r1, r9
 800526e:	4638      	mov	r0, r7
 8005270:	47c0      	blx	r8
 8005272:	3001      	adds	r0, #1
 8005274:	d0e6      	beq.n	8005244 <_printf_common+0xa4>
 8005276:	3601      	adds	r6, #1
 8005278:	e7d9      	b.n	800522e <_printf_common+0x8e>
	...

0800527c <_printf_i>:
 800527c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005280:	7e0f      	ldrb	r7, [r1, #24]
 8005282:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005284:	2f78      	cmp	r7, #120	; 0x78
 8005286:	4691      	mov	r9, r2
 8005288:	4680      	mov	r8, r0
 800528a:	460c      	mov	r4, r1
 800528c:	469a      	mov	sl, r3
 800528e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005292:	d807      	bhi.n	80052a4 <_printf_i+0x28>
 8005294:	2f62      	cmp	r7, #98	; 0x62
 8005296:	d80a      	bhi.n	80052ae <_printf_i+0x32>
 8005298:	2f00      	cmp	r7, #0
 800529a:	f000 80d4 	beq.w	8005446 <_printf_i+0x1ca>
 800529e:	2f58      	cmp	r7, #88	; 0x58
 80052a0:	f000 80c0 	beq.w	8005424 <_printf_i+0x1a8>
 80052a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052ac:	e03a      	b.n	8005324 <_printf_i+0xa8>
 80052ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052b2:	2b15      	cmp	r3, #21
 80052b4:	d8f6      	bhi.n	80052a4 <_printf_i+0x28>
 80052b6:	a101      	add	r1, pc, #4	; (adr r1, 80052bc <_printf_i+0x40>)
 80052b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052bc:	08005315 	.word	0x08005315
 80052c0:	08005329 	.word	0x08005329
 80052c4:	080052a5 	.word	0x080052a5
 80052c8:	080052a5 	.word	0x080052a5
 80052cc:	080052a5 	.word	0x080052a5
 80052d0:	080052a5 	.word	0x080052a5
 80052d4:	08005329 	.word	0x08005329
 80052d8:	080052a5 	.word	0x080052a5
 80052dc:	080052a5 	.word	0x080052a5
 80052e0:	080052a5 	.word	0x080052a5
 80052e4:	080052a5 	.word	0x080052a5
 80052e8:	0800542d 	.word	0x0800542d
 80052ec:	08005355 	.word	0x08005355
 80052f0:	080053e7 	.word	0x080053e7
 80052f4:	080052a5 	.word	0x080052a5
 80052f8:	080052a5 	.word	0x080052a5
 80052fc:	0800544f 	.word	0x0800544f
 8005300:	080052a5 	.word	0x080052a5
 8005304:	08005355 	.word	0x08005355
 8005308:	080052a5 	.word	0x080052a5
 800530c:	080052a5 	.word	0x080052a5
 8005310:	080053ef 	.word	0x080053ef
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	1d1a      	adds	r2, r3, #4
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	602a      	str	r2, [r5, #0]
 800531c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005324:	2301      	movs	r3, #1
 8005326:	e09f      	b.n	8005468 <_printf_i+0x1ec>
 8005328:	6820      	ldr	r0, [r4, #0]
 800532a:	682b      	ldr	r3, [r5, #0]
 800532c:	0607      	lsls	r7, r0, #24
 800532e:	f103 0104 	add.w	r1, r3, #4
 8005332:	6029      	str	r1, [r5, #0]
 8005334:	d501      	bpl.n	800533a <_printf_i+0xbe>
 8005336:	681e      	ldr	r6, [r3, #0]
 8005338:	e003      	b.n	8005342 <_printf_i+0xc6>
 800533a:	0646      	lsls	r6, r0, #25
 800533c:	d5fb      	bpl.n	8005336 <_printf_i+0xba>
 800533e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005342:	2e00      	cmp	r6, #0
 8005344:	da03      	bge.n	800534e <_printf_i+0xd2>
 8005346:	232d      	movs	r3, #45	; 0x2d
 8005348:	4276      	negs	r6, r6
 800534a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800534e:	485a      	ldr	r0, [pc, #360]	; (80054b8 <_printf_i+0x23c>)
 8005350:	230a      	movs	r3, #10
 8005352:	e012      	b.n	800537a <_printf_i+0xfe>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	6820      	ldr	r0, [r4, #0]
 8005358:	1d19      	adds	r1, r3, #4
 800535a:	6029      	str	r1, [r5, #0]
 800535c:	0605      	lsls	r5, r0, #24
 800535e:	d501      	bpl.n	8005364 <_printf_i+0xe8>
 8005360:	681e      	ldr	r6, [r3, #0]
 8005362:	e002      	b.n	800536a <_printf_i+0xee>
 8005364:	0641      	lsls	r1, r0, #25
 8005366:	d5fb      	bpl.n	8005360 <_printf_i+0xe4>
 8005368:	881e      	ldrh	r6, [r3, #0]
 800536a:	4853      	ldr	r0, [pc, #332]	; (80054b8 <_printf_i+0x23c>)
 800536c:	2f6f      	cmp	r7, #111	; 0x6f
 800536e:	bf0c      	ite	eq
 8005370:	2308      	moveq	r3, #8
 8005372:	230a      	movne	r3, #10
 8005374:	2100      	movs	r1, #0
 8005376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800537a:	6865      	ldr	r5, [r4, #4]
 800537c:	60a5      	str	r5, [r4, #8]
 800537e:	2d00      	cmp	r5, #0
 8005380:	bfa2      	ittt	ge
 8005382:	6821      	ldrge	r1, [r4, #0]
 8005384:	f021 0104 	bicge.w	r1, r1, #4
 8005388:	6021      	strge	r1, [r4, #0]
 800538a:	b90e      	cbnz	r6, 8005390 <_printf_i+0x114>
 800538c:	2d00      	cmp	r5, #0
 800538e:	d04b      	beq.n	8005428 <_printf_i+0x1ac>
 8005390:	4615      	mov	r5, r2
 8005392:	fbb6 f1f3 	udiv	r1, r6, r3
 8005396:	fb03 6711 	mls	r7, r3, r1, r6
 800539a:	5dc7      	ldrb	r7, [r0, r7]
 800539c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053a0:	4637      	mov	r7, r6
 80053a2:	42bb      	cmp	r3, r7
 80053a4:	460e      	mov	r6, r1
 80053a6:	d9f4      	bls.n	8005392 <_printf_i+0x116>
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d10b      	bne.n	80053c4 <_printf_i+0x148>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	07de      	lsls	r6, r3, #31
 80053b0:	d508      	bpl.n	80053c4 <_printf_i+0x148>
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	6861      	ldr	r1, [r4, #4]
 80053b6:	4299      	cmp	r1, r3
 80053b8:	bfde      	ittt	le
 80053ba:	2330      	movle	r3, #48	; 0x30
 80053bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053c4:	1b52      	subs	r2, r2, r5
 80053c6:	6122      	str	r2, [r4, #16]
 80053c8:	f8cd a000 	str.w	sl, [sp]
 80053cc:	464b      	mov	r3, r9
 80053ce:	aa03      	add	r2, sp, #12
 80053d0:	4621      	mov	r1, r4
 80053d2:	4640      	mov	r0, r8
 80053d4:	f7ff fee4 	bl	80051a0 <_printf_common>
 80053d8:	3001      	adds	r0, #1
 80053da:	d14a      	bne.n	8005472 <_printf_i+0x1f6>
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	b004      	add	sp, #16
 80053e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	f043 0320 	orr.w	r3, r3, #32
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	4833      	ldr	r0, [pc, #204]	; (80054bc <_printf_i+0x240>)
 80053f0:	2778      	movs	r7, #120	; 0x78
 80053f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	6829      	ldr	r1, [r5, #0]
 80053fa:	061f      	lsls	r7, r3, #24
 80053fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005400:	d402      	bmi.n	8005408 <_printf_i+0x18c>
 8005402:	065f      	lsls	r7, r3, #25
 8005404:	bf48      	it	mi
 8005406:	b2b6      	uxthmi	r6, r6
 8005408:	07df      	lsls	r7, r3, #31
 800540a:	bf48      	it	mi
 800540c:	f043 0320 	orrmi.w	r3, r3, #32
 8005410:	6029      	str	r1, [r5, #0]
 8005412:	bf48      	it	mi
 8005414:	6023      	strmi	r3, [r4, #0]
 8005416:	b91e      	cbnz	r6, 8005420 <_printf_i+0x1a4>
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	f023 0320 	bic.w	r3, r3, #32
 800541e:	6023      	str	r3, [r4, #0]
 8005420:	2310      	movs	r3, #16
 8005422:	e7a7      	b.n	8005374 <_printf_i+0xf8>
 8005424:	4824      	ldr	r0, [pc, #144]	; (80054b8 <_printf_i+0x23c>)
 8005426:	e7e4      	b.n	80053f2 <_printf_i+0x176>
 8005428:	4615      	mov	r5, r2
 800542a:	e7bd      	b.n	80053a8 <_printf_i+0x12c>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	6826      	ldr	r6, [r4, #0]
 8005430:	6961      	ldr	r1, [r4, #20]
 8005432:	1d18      	adds	r0, r3, #4
 8005434:	6028      	str	r0, [r5, #0]
 8005436:	0635      	lsls	r5, r6, #24
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	d501      	bpl.n	8005440 <_printf_i+0x1c4>
 800543c:	6019      	str	r1, [r3, #0]
 800543e:	e002      	b.n	8005446 <_printf_i+0x1ca>
 8005440:	0670      	lsls	r0, r6, #25
 8005442:	d5fb      	bpl.n	800543c <_printf_i+0x1c0>
 8005444:	8019      	strh	r1, [r3, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	4615      	mov	r5, r2
 800544c:	e7bc      	b.n	80053c8 <_printf_i+0x14c>
 800544e:	682b      	ldr	r3, [r5, #0]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	602a      	str	r2, [r5, #0]
 8005454:	681d      	ldr	r5, [r3, #0]
 8005456:	6862      	ldr	r2, [r4, #4]
 8005458:	2100      	movs	r1, #0
 800545a:	4628      	mov	r0, r5
 800545c:	f7fa feb8 	bl	80001d0 <memchr>
 8005460:	b108      	cbz	r0, 8005466 <_printf_i+0x1ea>
 8005462:	1b40      	subs	r0, r0, r5
 8005464:	6060      	str	r0, [r4, #4]
 8005466:	6863      	ldr	r3, [r4, #4]
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	2300      	movs	r3, #0
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005470:	e7aa      	b.n	80053c8 <_printf_i+0x14c>
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	462a      	mov	r2, r5
 8005476:	4649      	mov	r1, r9
 8005478:	4640      	mov	r0, r8
 800547a:	47d0      	blx	sl
 800547c:	3001      	adds	r0, #1
 800547e:	d0ad      	beq.n	80053dc <_printf_i+0x160>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	079b      	lsls	r3, r3, #30
 8005484:	d413      	bmi.n	80054ae <_printf_i+0x232>
 8005486:	68e0      	ldr	r0, [r4, #12]
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	4298      	cmp	r0, r3
 800548c:	bfb8      	it	lt
 800548e:	4618      	movlt	r0, r3
 8005490:	e7a6      	b.n	80053e0 <_printf_i+0x164>
 8005492:	2301      	movs	r3, #1
 8005494:	4632      	mov	r2, r6
 8005496:	4649      	mov	r1, r9
 8005498:	4640      	mov	r0, r8
 800549a:	47d0      	blx	sl
 800549c:	3001      	adds	r0, #1
 800549e:	d09d      	beq.n	80053dc <_printf_i+0x160>
 80054a0:	3501      	adds	r5, #1
 80054a2:	68e3      	ldr	r3, [r4, #12]
 80054a4:	9903      	ldr	r1, [sp, #12]
 80054a6:	1a5b      	subs	r3, r3, r1
 80054a8:	42ab      	cmp	r3, r5
 80054aa:	dcf2      	bgt.n	8005492 <_printf_i+0x216>
 80054ac:	e7eb      	b.n	8005486 <_printf_i+0x20a>
 80054ae:	2500      	movs	r5, #0
 80054b0:	f104 0619 	add.w	r6, r4, #25
 80054b4:	e7f5      	b.n	80054a2 <_printf_i+0x226>
 80054b6:	bf00      	nop
 80054b8:	08005a01 	.word	0x08005a01
 80054bc:	08005a12 	.word	0x08005a12

080054c0 <__sflush_r>:
 80054c0:	898a      	ldrh	r2, [r1, #12]
 80054c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	0710      	lsls	r0, r2, #28
 80054ca:	460c      	mov	r4, r1
 80054cc:	d458      	bmi.n	8005580 <__sflush_r+0xc0>
 80054ce:	684b      	ldr	r3, [r1, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dc05      	bgt.n	80054e0 <__sflush_r+0x20>
 80054d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	dc02      	bgt.n	80054e0 <__sflush_r+0x20>
 80054da:	2000      	movs	r0, #0
 80054dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054e2:	2e00      	cmp	r6, #0
 80054e4:	d0f9      	beq.n	80054da <__sflush_r+0x1a>
 80054e6:	2300      	movs	r3, #0
 80054e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054ec:	682f      	ldr	r7, [r5, #0]
 80054ee:	6a21      	ldr	r1, [r4, #32]
 80054f0:	602b      	str	r3, [r5, #0]
 80054f2:	d032      	beq.n	800555a <__sflush_r+0x9a>
 80054f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	075a      	lsls	r2, r3, #29
 80054fa:	d505      	bpl.n	8005508 <__sflush_r+0x48>
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	1ac0      	subs	r0, r0, r3
 8005500:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005502:	b10b      	cbz	r3, 8005508 <__sflush_r+0x48>
 8005504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005506:	1ac0      	subs	r0, r0, r3
 8005508:	2300      	movs	r3, #0
 800550a:	4602      	mov	r2, r0
 800550c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800550e:	6a21      	ldr	r1, [r4, #32]
 8005510:	4628      	mov	r0, r5
 8005512:	47b0      	blx	r6
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	89a3      	ldrh	r3, [r4, #12]
 8005518:	d106      	bne.n	8005528 <__sflush_r+0x68>
 800551a:	6829      	ldr	r1, [r5, #0]
 800551c:	291d      	cmp	r1, #29
 800551e:	d82b      	bhi.n	8005578 <__sflush_r+0xb8>
 8005520:	4a29      	ldr	r2, [pc, #164]	; (80055c8 <__sflush_r+0x108>)
 8005522:	410a      	asrs	r2, r1
 8005524:	07d6      	lsls	r6, r2, #31
 8005526:	d427      	bmi.n	8005578 <__sflush_r+0xb8>
 8005528:	2200      	movs	r2, #0
 800552a:	6062      	str	r2, [r4, #4]
 800552c:	04d9      	lsls	r1, r3, #19
 800552e:	6922      	ldr	r2, [r4, #16]
 8005530:	6022      	str	r2, [r4, #0]
 8005532:	d504      	bpl.n	800553e <__sflush_r+0x7e>
 8005534:	1c42      	adds	r2, r0, #1
 8005536:	d101      	bne.n	800553c <__sflush_r+0x7c>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b903      	cbnz	r3, 800553e <__sflush_r+0x7e>
 800553c:	6560      	str	r0, [r4, #84]	; 0x54
 800553e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005540:	602f      	str	r7, [r5, #0]
 8005542:	2900      	cmp	r1, #0
 8005544:	d0c9      	beq.n	80054da <__sflush_r+0x1a>
 8005546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800554a:	4299      	cmp	r1, r3
 800554c:	d002      	beq.n	8005554 <__sflush_r+0x94>
 800554e:	4628      	mov	r0, r5
 8005550:	f7ff fbea 	bl	8004d28 <_free_r>
 8005554:	2000      	movs	r0, #0
 8005556:	6360      	str	r0, [r4, #52]	; 0x34
 8005558:	e7c0      	b.n	80054dc <__sflush_r+0x1c>
 800555a:	2301      	movs	r3, #1
 800555c:	4628      	mov	r0, r5
 800555e:	47b0      	blx	r6
 8005560:	1c41      	adds	r1, r0, #1
 8005562:	d1c8      	bne.n	80054f6 <__sflush_r+0x36>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0c5      	beq.n	80054f6 <__sflush_r+0x36>
 800556a:	2b1d      	cmp	r3, #29
 800556c:	d001      	beq.n	8005572 <__sflush_r+0xb2>
 800556e:	2b16      	cmp	r3, #22
 8005570:	d101      	bne.n	8005576 <__sflush_r+0xb6>
 8005572:	602f      	str	r7, [r5, #0]
 8005574:	e7b1      	b.n	80054da <__sflush_r+0x1a>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	e7ad      	b.n	80054dc <__sflush_r+0x1c>
 8005580:	690f      	ldr	r7, [r1, #16]
 8005582:	2f00      	cmp	r7, #0
 8005584:	d0a9      	beq.n	80054da <__sflush_r+0x1a>
 8005586:	0793      	lsls	r3, r2, #30
 8005588:	680e      	ldr	r6, [r1, #0]
 800558a:	bf08      	it	eq
 800558c:	694b      	ldreq	r3, [r1, #20]
 800558e:	600f      	str	r7, [r1, #0]
 8005590:	bf18      	it	ne
 8005592:	2300      	movne	r3, #0
 8005594:	eba6 0807 	sub.w	r8, r6, r7
 8005598:	608b      	str	r3, [r1, #8]
 800559a:	f1b8 0f00 	cmp.w	r8, #0
 800559e:	dd9c      	ble.n	80054da <__sflush_r+0x1a>
 80055a0:	6a21      	ldr	r1, [r4, #32]
 80055a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055a4:	4643      	mov	r3, r8
 80055a6:	463a      	mov	r2, r7
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b0      	blx	r6
 80055ac:	2800      	cmp	r0, #0
 80055ae:	dc06      	bgt.n	80055be <__sflush_r+0xfe>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295
 80055bc:	e78e      	b.n	80054dc <__sflush_r+0x1c>
 80055be:	4407      	add	r7, r0
 80055c0:	eba8 0800 	sub.w	r8, r8, r0
 80055c4:	e7e9      	b.n	800559a <__sflush_r+0xda>
 80055c6:	bf00      	nop
 80055c8:	dfbffffe 	.word	0xdfbffffe

080055cc <_fflush_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	4605      	mov	r5, r0
 80055d2:	460c      	mov	r4, r1
 80055d4:	b913      	cbnz	r3, 80055dc <_fflush_r+0x10>
 80055d6:	2500      	movs	r5, #0
 80055d8:	4628      	mov	r0, r5
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	b118      	cbz	r0, 80055e6 <_fflush_r+0x1a>
 80055de:	6a03      	ldr	r3, [r0, #32]
 80055e0:	b90b      	cbnz	r3, 80055e6 <_fflush_r+0x1a>
 80055e2:	f7ff fa8d 	bl	8004b00 <__sinit>
 80055e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f3      	beq.n	80055d6 <_fflush_r+0xa>
 80055ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055f0:	07d0      	lsls	r0, r2, #31
 80055f2:	d404      	bmi.n	80055fe <_fflush_r+0x32>
 80055f4:	0599      	lsls	r1, r3, #22
 80055f6:	d402      	bmi.n	80055fe <_fflush_r+0x32>
 80055f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055fa:	f7ff fb85 	bl	8004d08 <__retarget_lock_acquire_recursive>
 80055fe:	4628      	mov	r0, r5
 8005600:	4621      	mov	r1, r4
 8005602:	f7ff ff5d 	bl	80054c0 <__sflush_r>
 8005606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005608:	07da      	lsls	r2, r3, #31
 800560a:	4605      	mov	r5, r0
 800560c:	d4e4      	bmi.n	80055d8 <_fflush_r+0xc>
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	059b      	lsls	r3, r3, #22
 8005612:	d4e1      	bmi.n	80055d8 <_fflush_r+0xc>
 8005614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005616:	f7ff fb78 	bl	8004d0a <__retarget_lock_release_recursive>
 800561a:	e7dd      	b.n	80055d8 <_fflush_r+0xc>

0800561c <__swbuf_r>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	460e      	mov	r6, r1
 8005620:	4614      	mov	r4, r2
 8005622:	4605      	mov	r5, r0
 8005624:	b118      	cbz	r0, 800562e <__swbuf_r+0x12>
 8005626:	6a03      	ldr	r3, [r0, #32]
 8005628:	b90b      	cbnz	r3, 800562e <__swbuf_r+0x12>
 800562a:	f7ff fa69 	bl	8004b00 <__sinit>
 800562e:	69a3      	ldr	r3, [r4, #24]
 8005630:	60a3      	str	r3, [r4, #8]
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	071a      	lsls	r2, r3, #28
 8005636:	d525      	bpl.n	8005684 <__swbuf_r+0x68>
 8005638:	6923      	ldr	r3, [r4, #16]
 800563a:	b31b      	cbz	r3, 8005684 <__swbuf_r+0x68>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	6922      	ldr	r2, [r4, #16]
 8005640:	1a98      	subs	r0, r3, r2
 8005642:	6963      	ldr	r3, [r4, #20]
 8005644:	b2f6      	uxtb	r6, r6
 8005646:	4283      	cmp	r3, r0
 8005648:	4637      	mov	r7, r6
 800564a:	dc04      	bgt.n	8005656 <__swbuf_r+0x3a>
 800564c:	4621      	mov	r1, r4
 800564e:	4628      	mov	r0, r5
 8005650:	f7ff ffbc 	bl	80055cc <_fflush_r>
 8005654:	b9e0      	cbnz	r0, 8005690 <__swbuf_r+0x74>
 8005656:	68a3      	ldr	r3, [r4, #8]
 8005658:	3b01      	subs	r3, #1
 800565a:	60a3      	str	r3, [r4, #8]
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	6022      	str	r2, [r4, #0]
 8005662:	701e      	strb	r6, [r3, #0]
 8005664:	6962      	ldr	r2, [r4, #20]
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	429a      	cmp	r2, r3
 800566a:	d004      	beq.n	8005676 <__swbuf_r+0x5a>
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	07db      	lsls	r3, r3, #31
 8005670:	d506      	bpl.n	8005680 <__swbuf_r+0x64>
 8005672:	2e0a      	cmp	r6, #10
 8005674:	d104      	bne.n	8005680 <__swbuf_r+0x64>
 8005676:	4621      	mov	r1, r4
 8005678:	4628      	mov	r0, r5
 800567a:	f7ff ffa7 	bl	80055cc <_fflush_r>
 800567e:	b938      	cbnz	r0, 8005690 <__swbuf_r+0x74>
 8005680:	4638      	mov	r0, r7
 8005682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005684:	4621      	mov	r1, r4
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f806 	bl	8005698 <__swsetup_r>
 800568c:	2800      	cmp	r0, #0
 800568e:	d0d5      	beq.n	800563c <__swbuf_r+0x20>
 8005690:	f04f 37ff 	mov.w	r7, #4294967295
 8005694:	e7f4      	b.n	8005680 <__swbuf_r+0x64>
	...

08005698 <__swsetup_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4b2a      	ldr	r3, [pc, #168]	; (8005744 <__swsetup_r+0xac>)
 800569c:	4605      	mov	r5, r0
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	460c      	mov	r4, r1
 80056a2:	b118      	cbz	r0, 80056ac <__swsetup_r+0x14>
 80056a4:	6a03      	ldr	r3, [r0, #32]
 80056a6:	b90b      	cbnz	r3, 80056ac <__swsetup_r+0x14>
 80056a8:	f7ff fa2a 	bl	8004b00 <__sinit>
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056b2:	0718      	lsls	r0, r3, #28
 80056b4:	d422      	bmi.n	80056fc <__swsetup_r+0x64>
 80056b6:	06d9      	lsls	r1, r3, #27
 80056b8:	d407      	bmi.n	80056ca <__swsetup_r+0x32>
 80056ba:	2309      	movs	r3, #9
 80056bc:	602b      	str	r3, [r5, #0]
 80056be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e034      	b.n	8005734 <__swsetup_r+0x9c>
 80056ca:	0758      	lsls	r0, r3, #29
 80056cc:	d512      	bpl.n	80056f4 <__swsetup_r+0x5c>
 80056ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056d0:	b141      	cbz	r1, 80056e4 <__swsetup_r+0x4c>
 80056d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056d6:	4299      	cmp	r1, r3
 80056d8:	d002      	beq.n	80056e0 <__swsetup_r+0x48>
 80056da:	4628      	mov	r0, r5
 80056dc:	f7ff fb24 	bl	8004d28 <_free_r>
 80056e0:	2300      	movs	r3, #0
 80056e2:	6363      	str	r3, [r4, #52]	; 0x34
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056ea:	81a3      	strh	r3, [r4, #12]
 80056ec:	2300      	movs	r3, #0
 80056ee:	6063      	str	r3, [r4, #4]
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	6023      	str	r3, [r4, #0]
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	f043 0308 	orr.w	r3, r3, #8
 80056fa:	81a3      	strh	r3, [r4, #12]
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	b94b      	cbnz	r3, 8005714 <__swsetup_r+0x7c>
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800570a:	d003      	beq.n	8005714 <__swsetup_r+0x7c>
 800570c:	4621      	mov	r1, r4
 800570e:	4628      	mov	r0, r5
 8005710:	f000 f850 	bl	80057b4 <__smakebuf_r>
 8005714:	89a0      	ldrh	r0, [r4, #12]
 8005716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800571a:	f010 0301 	ands.w	r3, r0, #1
 800571e:	d00a      	beq.n	8005736 <__swsetup_r+0x9e>
 8005720:	2300      	movs	r3, #0
 8005722:	60a3      	str	r3, [r4, #8]
 8005724:	6963      	ldr	r3, [r4, #20]
 8005726:	425b      	negs	r3, r3
 8005728:	61a3      	str	r3, [r4, #24]
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	b943      	cbnz	r3, 8005740 <__swsetup_r+0xa8>
 800572e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005732:	d1c4      	bne.n	80056be <__swsetup_r+0x26>
 8005734:	bd38      	pop	{r3, r4, r5, pc}
 8005736:	0781      	lsls	r1, r0, #30
 8005738:	bf58      	it	pl
 800573a:	6963      	ldrpl	r3, [r4, #20]
 800573c:	60a3      	str	r3, [r4, #8]
 800573e:	e7f4      	b.n	800572a <__swsetup_r+0x92>
 8005740:	2000      	movs	r0, #0
 8005742:	e7f7      	b.n	8005734 <__swsetup_r+0x9c>
 8005744:	20000074 	.word	0x20000074

08005748 <_sbrk_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d06      	ldr	r5, [pc, #24]	; (8005764 <_sbrk_r+0x1c>)
 800574c:	2300      	movs	r3, #0
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	602b      	str	r3, [r5, #0]
 8005754:	f7fb f99c 	bl	8000a90 <_sbrk>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_sbrk_r+0x1a>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_sbrk_r+0x1a>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	20004b88 	.word	0x20004b88

08005768 <__swhatbuf_r>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	460c      	mov	r4, r1
 800576c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005770:	2900      	cmp	r1, #0
 8005772:	b096      	sub	sp, #88	; 0x58
 8005774:	4615      	mov	r5, r2
 8005776:	461e      	mov	r6, r3
 8005778:	da0d      	bge.n	8005796 <__swhatbuf_r+0x2e>
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005780:	f04f 0100 	mov.w	r1, #0
 8005784:	bf0c      	ite	eq
 8005786:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800578a:	2340      	movne	r3, #64	; 0x40
 800578c:	2000      	movs	r0, #0
 800578e:	6031      	str	r1, [r6, #0]
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	b016      	add	sp, #88	; 0x58
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	466a      	mov	r2, sp
 8005798:	f000 f848 	bl	800582c <_fstat_r>
 800579c:	2800      	cmp	r0, #0
 800579e:	dbec      	blt.n	800577a <__swhatbuf_r+0x12>
 80057a0:	9901      	ldr	r1, [sp, #4]
 80057a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80057a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80057aa:	4259      	negs	r1, r3
 80057ac:	4159      	adcs	r1, r3
 80057ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b2:	e7eb      	b.n	800578c <__swhatbuf_r+0x24>

080057b4 <__smakebuf_r>:
 80057b4:	898b      	ldrh	r3, [r1, #12]
 80057b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057b8:	079d      	lsls	r5, r3, #30
 80057ba:	4606      	mov	r6, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	d507      	bpl.n	80057d0 <__smakebuf_r+0x1c>
 80057c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	6123      	str	r3, [r4, #16]
 80057c8:	2301      	movs	r3, #1
 80057ca:	6163      	str	r3, [r4, #20]
 80057cc:	b002      	add	sp, #8
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	ab01      	add	r3, sp, #4
 80057d2:	466a      	mov	r2, sp
 80057d4:	f7ff ffc8 	bl	8005768 <__swhatbuf_r>
 80057d8:	9900      	ldr	r1, [sp, #0]
 80057da:	4605      	mov	r5, r0
 80057dc:	4630      	mov	r0, r6
 80057de:	f7ff fb0f 	bl	8004e00 <_malloc_r>
 80057e2:	b948      	cbnz	r0, 80057f8 <__smakebuf_r+0x44>
 80057e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057e8:	059a      	lsls	r2, r3, #22
 80057ea:	d4ef      	bmi.n	80057cc <__smakebuf_r+0x18>
 80057ec:	f023 0303 	bic.w	r3, r3, #3
 80057f0:	f043 0302 	orr.w	r3, r3, #2
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	e7e3      	b.n	80057c0 <__smakebuf_r+0xc>
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	6020      	str	r0, [r4, #0]
 80057fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005800:	81a3      	strh	r3, [r4, #12]
 8005802:	9b00      	ldr	r3, [sp, #0]
 8005804:	6163      	str	r3, [r4, #20]
 8005806:	9b01      	ldr	r3, [sp, #4]
 8005808:	6120      	str	r0, [r4, #16]
 800580a:	b15b      	cbz	r3, 8005824 <__smakebuf_r+0x70>
 800580c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005810:	4630      	mov	r0, r6
 8005812:	f000 f81d 	bl	8005850 <_isatty_r>
 8005816:	b128      	cbz	r0, 8005824 <__smakebuf_r+0x70>
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	f023 0303 	bic.w	r3, r3, #3
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	431d      	orrs	r5, r3
 8005828:	81a5      	strh	r5, [r4, #12]
 800582a:	e7cf      	b.n	80057cc <__smakebuf_r+0x18>

0800582c <_fstat_r>:
 800582c:	b538      	push	{r3, r4, r5, lr}
 800582e:	4d07      	ldr	r5, [pc, #28]	; (800584c <_fstat_r+0x20>)
 8005830:	2300      	movs	r3, #0
 8005832:	4604      	mov	r4, r0
 8005834:	4608      	mov	r0, r1
 8005836:	4611      	mov	r1, r2
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	f7fb f900 	bl	8000a3e <_fstat>
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	d102      	bne.n	8005848 <_fstat_r+0x1c>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	b103      	cbz	r3, 8005848 <_fstat_r+0x1c>
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	bd38      	pop	{r3, r4, r5, pc}
 800584a:	bf00      	nop
 800584c:	20004b88 	.word	0x20004b88

08005850 <_isatty_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d06      	ldr	r5, [pc, #24]	; (800586c <_isatty_r+0x1c>)
 8005854:	2300      	movs	r3, #0
 8005856:	4604      	mov	r4, r0
 8005858:	4608      	mov	r0, r1
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	f7fb f8ff 	bl	8000a5e <_isatty>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d102      	bne.n	800586a <_isatty_r+0x1a>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	b103      	cbz	r3, 800586a <_isatty_r+0x1a>
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	20004b88 	.word	0x20004b88

08005870 <_init>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	bf00      	nop
 8005874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005876:	bc08      	pop	{r3}
 8005878:	469e      	mov	lr, r3
 800587a:	4770      	bx	lr

0800587c <_fini>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	bf00      	nop
 8005880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005882:	bc08      	pop	{r3}
 8005884:	469e      	mov	lr, r3
 8005886:	4770      	bx	lr
